---
- name: Side Effect
  hosts: all
  vars:
    to_repo: "{{ lookup('env', 'TO_REPO') }}"
    from_repo: "{{ lookup('env', 'FROM_REPO') }}"
    to_version: "{{ lookup('env', 'TO_PDMDB_VERSION') }}"
    from_version: "{{ lookup('env', 'FROM_PDMDB_VERSION') }}"
  become: true
  become_method: sudo
  tasks:
    - set_fact: to_maj_version={{ to_version.split('-')[1].split('.')[0] }}.{{ to_version.split('-')[1].split('.')[1] }}

    - name: check maj version
      debug: msg={{to_maj_version}}

    - name: set compatibilty version for downgrade
      shell: |
        mongo --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{to_maj_version}}" })'
      register: set_version
      when: from_version > to_version

    - name: stop services for downgrade
      service:
        name: pbm-agent
        state: stopped
      when: from_version > to_version

    - name: stop services for downgrade
      service:
        name: mongod
        state: stopped
      when: from_version > to_version

    - name: install necessary deb packages for downgrade
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: present
      vars:
        packages:
        - dialog
        - apt-utils
      when: ansible_os_family == "Debian" and from_version > to_version

    - name: uninstall psmdb and pbm deb/rpm packages for downgrade
      include_tasks: ../../tasks/remove_psmdb.yml
      vars:
       psmdb_version: "{{ lookup('env', 'FROM_PDMDB_VERSION') }}"
      when: from_version > to_version

    - name: clean and update yum cache
      shell: |
        yum clean all
        yum makecache
      when: ansible_os_family == "RedHat"

    - name: disable all repos
      command: percona-release disable all

    - name: enable new pdmdb repo
      command: percona-release enable {{ to_version }} {{ to_repo }}

    - name: Set PSMDB version
      set_fact:
        psmdb_server_version: "{{ lookup('env', 'TO_PDMDB_VERSION').split('-')[1] }}"

    - block:
      - name: include tasks for installing PSMDB
        include_tasks: ../../../tasks/install_psmdb.yml
        vars:
          psmdb_to_test: "{{ psmdb_server_version }}"
          psmdb_pkg_name_addon: "{{ '' }}"
      environment:
        PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

    - name: Check if /etc/mongod.conf.rpmsave exists
      stat:
        path: /etc/mongod.conf.rpmsave
      register: stat_rpmsave

    - name: If necessary replace mongod.conf with rpmsave
      copy:
        remote_src: yes
        src: "/etc/mongod.conf.rpmsave"
        dest: /etc/mongod.conf
      when: stat_rpmsave.stat.exists

    - name: Check if /etc/sysconfig/pbm-agent.rpmsave exists
      stat:
        path: /etc/sysconfig/pbm-agent.rpmsave
      register: stat_pbm_rpmsave

    - name: If necessary replace pbm sysconfig with rpmsave
      copy:
        remote_src: yes
        src: "/etc/sysconfig/pbm-agent.rpmsave"
        dest: /etc/sysconfig/pbm-agent
      when: stat_pbm_rpmsave.stat.exists

    - name: perform daemon-reload for systemd-based os
      systemd:
        daemon_reload: yes
      when: ansible_service_mgr == "systemd"

    - name: restart mongod service
      service:
        name: mongod
        state: restarted

    - name: update PBM deb packages
      apt:
        name: percona-backup-mongodb
        update_cache: yes
        state: latest
      when: ansible_os_family == "Debian"

    - name: update PBM rpm packages
      yum:
        name: percona-backup-mongodb
        state: latest
      when: ansible_os_family == "RedHat"

    - name: perform daemon-reload for systemd-based os
      systemd:
        daemon_reload: yes
      when: ansible_service_mgr == "systemd"

    - name: restart pbm-agent service
      service:
        name: pbm-agent
        state: restarted
