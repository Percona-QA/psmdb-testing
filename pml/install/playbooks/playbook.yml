---
- name: Converge
  hosts: all
  become: true
  become_method: sudo
  tasks:
    - set_fact:
        # Version of psmdb release to be enabled (psmdb-70)
        psmdb_to_test: "{{ lookup('env', 'PSMDB') | default('psmdb-80', true) }}"

    - set_fact:
        # Github token to access mongolink repo
        token: "{{ lookup('env', 'MONGO_REPO_TOKEN') }}"

    - set_fact:
        # Version of psmdb (e.g. 7.0.16)
        psmdb_version: "{{ lookup('env', 'PSMDB_VERSION') | default('latest', true) }}"

    - set_fact:
        # Version of mongosh
        psmdb_mongosh: "{{ psmdb_to_test.split('-')[1].split('.')[0] }}"

    - set_fact:
        # Branch of pml branch to test
        pml_branch: "{{ lookup('env', 'PML_BRANCH') | default('main', true) }}"

    - set_fact:
        # Go Version
        golang_version: "{{ lookup('env', 'GO_VERSION') | default('1.24.2', true) }}"

    - set_fact:
        # User to log into each AWS Instance
        ssh_user: "{{ lookup('env', 'SSH_USER') | default('none', true) }}"

    - name: Change Node hostname
      hostname:
        name: pml-source
      when: inventory_hostname == "pml-package-test"

    - name: Prerequisite for debian 11
      apt:
        name: iproute2
        update_cache: yes
      when: ansible_distribution == "Debian" and ansible_distribution_major_version >= "11"

    - name: Install deps
      yum:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - jq
          - vim
          - zlib-devel
          - libjpeg-devel
          - freetype-devel
          - gcc
          - python3-devel
          - python3.12
          - python3-pip
          - make
          - wget
          - git
          - docker
      when: ansible_os_family == "RedHat"

    - name: Install deps
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - jq
          - vim
          - zlib1g-dev
          - libjpeg-dev
          - libfreetype6-dev
          - gcc
          - python3-dev
          - python3.12
          - python3-pip
          - make
          - wget
          - git
          - iputils-ping
          - docker
      when: ansible_os_family == "Debian"

    - name: Install Go from official tarball on PML host
      vars:
        go_version: "{{ golang_version }}"
        go_tarball: "go{{ go_version }}.linux-amd64.tar.gz"
        go_url: "https://go.dev/dl/{{ go_tarball }}"
        go_install_dir: "/usr/local"
      block:
        - name: Download Go {{ go_version }}
          get_url:
            url: "{{ go_url }}"
            dest: "/tmp/{{ go_tarball }}"
            mode: '0644'

        - name: Extract Go
          unarchive:
            src: "/tmp/{{ go_tarball }}"
            dest: "{{ go_install_dir }}"
            remote_src: yes

    - name: Check Go is available
      command: go version
      environment:
        PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"
      register: go_version_output
      ignore_errors: true

    - name: Install Pymongo for Redhat
      pip:
        name:
          - pymongo
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Install Pymongo on Debian
      command: python3 -m pip install --break-system-packages pymongo
      when: ansible_facts['os_family'] == 'Debian'

    - name: Clone PML repo
      timeout: 180
      git:
        repo: 'https://{{ token }}@github.com/Percona-Lab/percona-mongolink.git'
        dest: /tmp/percona-mongolink
        version: "{{ pml_branch }}"

    - name: Build PML
      command: make build
      args:
        chdir: /tmp/percona-mongolink
      environment:
        PATH: /usr/local/go/bin:{{ ansible_env.PATH }}
        GOROOT: /usr/local/go/
        GOBIN: /usr/local/go/bin
      when: inventory_hostname == "jenkins-pml-mongolink"

    - name: Move mongolink binary to /usr/local/bin
      copy:
        src: /tmp/percona-mongolink/bin/percona-mongolink
        dest: /usr/local/bin/
        mode: '0755'
        remote_src: true
      when: inventory_hostname == "jenkins-pml-mongolink"

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: true

    - name: Add current user to docker group
      user:
        name: "{{ ansible_user | default('ec2-user') }}"
        groups: docker
        append: yes

    - name: Create Source PSMDB Docker Container
      community.docker.docker_container:
        name: source
        image: percona/percona-server-mongodb:8.0
        state: started
        restart_policy: unless-stopped
        published_ports:
          - "28017:28017"
        command: "--port=27017 --replSet=rs"

    - name: Create Destination PSMDB Docker Container
      community.docker.docker_container:
        name: destination
        image: percona/percona-server-mongodb:8.0
        state: started
        restart_policy: unless-stopped
        published_ports:
          - "28017:28017"
        command: "--port=28017 --replSet=rs1"
