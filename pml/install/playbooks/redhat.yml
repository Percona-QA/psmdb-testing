---
- name: Converge
  hosts: all
  become: true
  become_method: sudo
  tasks:
    - set_fact:
        # Github token to access mongolink repo
        token: "{{ lookup('env', 'MONGO_REPO_TOKEN') }}"

    - set_fact:
        # Version of psmdb (e.g. 6.0, 7.0, 8.0)
        psmdb_version: "{{ lookup('env', 'PSMDB_VERSION') | default('latest', true) }}"

    - set_fact:
        # Branch of pml branch to test
        pml_branch: "{{ lookup('env', 'PML_BRANCH') | default('main', true) }}"

    - set_fact:
        # Go Version
        golang_version: "{{ lookup('env', 'GO_VERSION') | default('1.24.2', true) }}"

    - set_fact:
        # User to log into each AWS Instance
        ssh_user: "{{ lookup('env', 'SSH_USER') | default('none', true) }}"

    - name: Install dependencies
      yum:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - jq
          - vim
          - zlib-devel
          - libjpeg-devel
          - freetype-devel
          - gcc
          - python3-devel
          - python3-pip
          - make
          - wget
          - git
      when: ansible_os_family == "RedHat"

    - name: Remove podman-docker if present
      yum:
        name: podman-docker
        state: absent
      when: ansible_os_family == "RedHat"

    - name: Install dnf plugins
      yum:
        name: dnf-plugins-core
        state: present
      when: ansible_os_family == "RedHat"

    - name: Add Docker CE repository
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: '0644'
      when:
        - ansible_os_family == "RedHat"

    - name: Force release server to use 9 in Docker repo for AL2023 compatibility
      replace:
        path: /etc/yum.repos.d/docker-ce.repo
        regexp: '\$releasever'
        replace: '9'
      when:
        - ansible_distribution == "Amazon"

    - name: Install Docker CE and dependencies
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when:
        - ansible_os_family == "RedHat"

    - name: Enable and start Docker service
      service:
        name: docker
        state: started
        enabled: true

    - name: Set runc binary URL based on architecture
      set_fact:
        runc_url: >-
          https://github.com/opencontainers/runc/releases/download/v1.1.12/{{
            'runc.arm64' if ansible_architecture == 'aarch64' else 'runc.amd64'
          }}

    - name: Download correct runc binary
      get_url:
        url: "{{ runc_url }}"
        dest: /usr/local/bin/runc
        mode: '0755'

    - name: Move runc to /usr/bin
      copy:
        src: /usr/local/bin/runc
        dest: /usr/bin/runc
        remote_src: yes
        mode: '0755'
        force: yes

    - name: Ensure docker group exists
      group:
        name: docker
        state: present

    - name: Add user ssh-user to docker group
      user:
        name: "{{ ssh_user }}"
        groups: docker
        append: yes

    - name: Ensure pip is installed on Amazon Linux
      package:
        name: python3-pip
        state: present
      when:
        - ansible_distribution == "Amazon"

    - name: Create Source PSMDB container
      community.docker.docker_container:
        name: source
        image: percona/percona-server-mongodb:{{ psmdb_version }}
        state: started
        restart_policy: unless-stopped
        published_ports:
          - "27017:27017"
        command: "--port=27017 --replSet rs0 --bind_ip_all"

    - name: Create Destination PSMDB container
      community.docker.docker_container:
        name: destination
        image: percona/percona-server-mongodb:{{ psmdb_version }}
        state: started
        restart_policy: unless-stopped
        published_ports:
          - "28017:27017"
        command: "--port=27017 --replSet rs1 --bind_ip_all"

    - name: Get info about the Source container
      community.docker.docker_container_info:
        name: source
      register: source_container

    - name: Get info about the Destination container
      community.docker.docker_container_info:
        name: destination
      register: destination_container

    - name: Store the Source Container IP
      set_fact:
        source_ip: "{{ source_container.container.NetworkSettings.Networks.bridge.IPAddress }}"

    - name: Store the Destination Container IP
      set_fact:
        destination_ip: "{{ destination_container.container.NetworkSettings.Networks.bridge.IPAddress }}"

    - name: Initiate source replicaset
      community.docker.docker_container_exec:
        container: source
        command: >
          mongosh --quiet --eval 'try { rs.initiate({_id: "rs0", members: [{ _id: 0, host: "{{ source_ip }}:27017" }]}); } catch (e) { print(e); quit(1); }'
      register: rs_source_result
      retries: 2
      delay: 5
      until: rs_source_result.rc == 0

    - name: Initiate destination replicaset
      community.docker.docker_container_exec:
        container: destination
        command: >
          mongosh --quiet --eval 'try { rs.initiate({_id: "rs1", members: [{ _id: 0, host: "{{ destination_ip }}:27017" }]}); } catch (e) { print(e); quit(1); }'
      register: rs_dest_result
      retries: 2
      delay: 5
      until: rs_dest_result.rc == 0

    - name: Add container IPs to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item.ip }} {{ item.hostname }}"
        state: present
        create: yes
      loop:
        - { ip: "{{ source_ip }}", hostname: "source" }
        - { ip: "{{ destination_ip }}", hostname: "destination" }
      become: true

    - name: Install Go from official tarball
      vars:
        go_version: "{{ golang_version }}"
        go_arch: >-
          {{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}
        go_tarball: "go{{ go_version }}.linux-{{ go_arch }}.tar.gz"
        go_url: "https://go.dev/dl/{{ go_tarball }}"
        go_install_dir: "/usr/local"
      block:
        - name: Download Go version:{{ go_version }}
          get_url:
            url: "{{ go_url }}"
            dest: "/tmp/{{ go_tarball }}"
            mode: '0644'

        - name: Extract Go
          unarchive:
            src: "/tmp/{{ go_tarball }}"
            dest: "{{ go_install_dir }}"
            remote_src: yes

    - name: Check Go is available
      command: go version
      environment:
        PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"
      register: go_version_output
      ignore_errors: true

    - name: Install Pymongo
      pip:
        name:
          - pymongo
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Clone PML repo
      git:
        repo: 'https://{{ token }}@github.com/Percona-Lab/percona-mongolink.git'
        dest: /tmp/percona-mongolink
        version: "{{ pml_branch }}"

    - name: Build PML
      command: make build
      args:
        chdir: /tmp/percona-mongolink
      environment:
        PATH: /usr/local/go/bin:{{ ansible_env.PATH }}
        GOROOT: /usr/local/go/
        GOBIN: /usr/local/go/bin

    - name: Move mongolink binary to /usr/local/bin
      copy:
        src: /tmp/percona-mongolink/bin/percona-mongolink
        dest: /usr/local/bin/
        mode: '0775'
        remote_src: true

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Create PML system unit file
      copy:
        dest: /etc/systemd/system/pml.service
        content: |
          [Unit]
          Description=Percona MongoLink Service
          After=network.target

          [Service]
          ExecStart=/usr/local/bin/percona-mongolink \
            --source mongodb://{{ source_ip }}:27017 \
            --target mongodb://{{ destination_ip }}:27017 \
            --log-level debug \
            --log-json
          Restart=on-failure
          User=root

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'

    - name: Reload systemd and start PML service
      service:
        daemon_reload: yes
        name: pml.service
        state: started