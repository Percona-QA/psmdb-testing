- include_tasks: "crts_keys.yml"

- name: Install Python deps via apt (Debian/Ubuntu)
  apt:
    update_cache: yes
    name:
      - python3-requests
      - python3-docker
    state: present
  become: yes

- name: Ensure Docker network exists
  docker_network:
    name: test
    driver: bridge
    state: present

- name: Remove pre-existing pykmip container
  docker_container:
    name: pykmip
    state: absent
    keep_volumes: false

- name: Copy PyKMIP configuration template to host
  template:
    src: pykmip_server.conf
    dest: /etc/pykmip/server.conf

- name: Run PyKMIP container
  docker_container:
    name: pykmip
    hostname: pykmip
    image: python:3.11-slim
    command: >
      bash -lc "set -euo pipefail;
                apt-get update &&
                apt-get install -y --no-install-recommends ca-certificates gcc libffi-dev libssl-dev python3-dev netcat-openbsd iproute2 procps &&
                python -m pip install --upgrade --no-cache-dir pip setuptools wheel &&
                python -m pip install --no-cache-dir pykmip &&
                exec pykmip-server -f /etc/pykmip/server.conf"
    restart_policy: unless-stopped
    published_ports:
      - "5696:5696"
    volumes:
      - "/etc/pykmip:/etc/pykmip"
    networks:
      - name: test

- name: Wait until PyKMIP port is listening inside the container
  community.docker.docker_container_exec:
    container: pykmip
    command: bash -lc 'for i in {1..60}; do nc -z pykmip 5696 && exit 0; sleep 2; done; exit 1'
  register: kmip_ready
  retries: 3
  delay: 5
  until: kmip_ready.rc == 0

- name: Get pykmip container info
  community.docker.docker_container_info:
    name: pykmip
  register: pykmip_info

- name: Set fact with pykmip IP (first network)
  set_fact:
    pykmip_ip: "{{ (pykmip_info.containers[0].NetworkSettings.IPAddress }}"

- name: Ensure pykmip resolves locally
  lineinfile:
    path: /etc/hosts
    line: "{{ pykmip_ip }} pykmip"
    state: present
  args:
    unsafe_writes: true
