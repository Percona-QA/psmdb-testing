- include_tasks: "RedHat.yml"
- include_tasks: "Debian.yml"
- include_vars: "main.yml"

- name: Install dependencies (Debian)
  apt:
    update_cache: yes
    name:
      - vim
      - krb5-user
      - python3-requests
      - python3-docker
    state: present
  become: yes
  when: ansible_os_family == "Debian"

- name: Install dependencies (Redhat)
  yum:
    update_cache: yes
    name:
      - vim
      - krb5-workstation
    state: present
  become: yes
  when: ansible_os_family == "RedHat"

- name: Get system hostname
  ansible.builtin.shell: hostname
  register: hostname_raw
  changed_when: false

- name: Set principal host from facts
  ansible.builtin.set_fact:
    hostname: "{{ hostname_raw.stdout }}"

- name: Remove pre-existing kerberos container
  docker_container:
    name: kerberos
    state: absent
    keep_volumes: false

- name: Create required folders
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0750'
  loop:
    - /var/lib/krb5kdc
    - /keytabs

- name: Creates directory
  ansible.builtin.file:
    path: /etc/kerberos
    state: directory

- name: Copy KDC configuration file
  template:
    src: krb5.conf
    dest: "/etc/krb5.conf"

- name: Run Kerberos container
  community.docker.docker_container:
    name: kerberos
    image: "alpine"
    command: >
      sh -c '
          apk add --no-cache bash krb5 krb5-server krb5-pkinit &&
          if [ ! -f /var/lib/krb5kdc/principal ]; then
            kdb5_util -P password create &&
            kadmin.local -q "addprinc -pw password root/admin";
          fi &&
          /usr/sbin/krb5kdc -n
        '
    restart_policy: unless-stopped
    published_ports:
      - "88:88/udp"
      - "88:88/tcp"
    volumes:
      - "/etc/krb5.conf:/etc/krb5.conf"
      - "/var/lib/krb5kdc:/var/lib/krb5kdc"
      - "/keytabs:/keytabs"

#### Add KDC Principle ####

- name: Adding a wait for the container to be ready
  ansible.builtin.command:
    cmd: >
      docker exec kerberos sh -c 'test -x /usr/sbin/kadmin.local'
  register: kadmin_check
  retries: 10
  delay: 2
  until: kadmin_check.rc == 0
  changed_when: false

- name: Create MongoDB service principal for mongod
  ansible.builtin.command:
    cmd: >
      docker exec kerberos sh -c 'kadmin.local -q "addprinc -randkey mongodb/{{ hostname }}@PERCONATEST.COM"'
  register: add_service_princ
  failed_when: >
    add_service_princ.rc != 0 and
    ("already exists" not in (add_service_princ.stderr | default(''))) and
    ("already exists" not in (add_service_princ.stdout | default('')))

- name: Refresh MongoDB service keytab in Kerberos container
  ansible.builtin.command:
    cmd: >
      docker exec kerberos sh -c 'kadmin.local -q "ktadd -k /keytabs/mongodb.keytab mongodb/{{ hostname }}@PERCONATEST.COM"'

- name: Copy mongodb.keytab from container to host /etc/mongodb.keytab
  ansible.builtin.command:
    cmd: >
      docker cp kerberos:/keytabs/mongodb.keytab /etc/mongodb.keytab
  register: docker_cp_keytab
  changed_when: docker_cp_keytab.rc == 0

- name: Ensure /etc/mongodb.keytab permissions
  ansible.builtin.file:
    path: /etc/mongodb.keytab
    owner: mongod
    group: mongod
    mode: '0600'

- name: Obtain Kerberos TGT for root/admin@PERCONATEST.COM
  ansible.builtin.shell: |
    echo 'password' | kinit -V root/admin@PERCONATEST.COM
  register: kinit_result
  changed_when: kinit_result.rc == 0

#### Add Environment variable to mongod service ####

- name: Add KRB5_KTNAME for PSMDB deb
  lineinfile:
    path: /etc/default/mongod
    line: KRB5_KTNAME=/etc/mongodb.keytab
    create: yes
  when: ansible_os_family == "Debian"

- name: Add KRB5_KTNAME for PSMDB rpm
  lineinfile:
    path: /etc/sysconfig/mongod
    line: KRB5_KTNAME=/etc/mongodb.keytab
    create: yes
  when: ansible_os_family == "RedHat"

- name: Collect installed package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Restart mongod to pick up Kerberos keytab env
  ansible.builtin.service:
    name: mongod
    state: restarted
    enabled: yes

- name: Adding short form of hostname to /etc/hosts (Debian 11)
  become: true
  ansible.builtin.replace:
    path: /etc/hosts
    regexp: '^(\s*127\.0\.1\.1)\s+ip-10-188-1-16\.us-west-2\.compute\.internal\s+{{ hostname }}\s*$'
    replace: '\1 ip-10-188-1-16'
    backup: true
  when:
    - ansible_distribution == "Debian"
    - ansible_distribution_major_version | int == 11




