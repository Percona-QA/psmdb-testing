---
- include_vars: all.yml
- include_vars: "Debian-vars.yml"
  when: ansible_os_family == "Debian"

- name: Install Python SDKs from apt
  become: true
  apt:
    update_cache: true
    name:
      - python3-ldap
      - python3-docker
      - python3-requests
    state: present

- name: Ensure Docker network exists
  community.docker.docker_network:
    name: test
    driver: bridge
    state: present

- name: Run OpenLDAP container
  docker_container:
    name: ldap
    image: bitnamilegacy/openldap:latest
    restart_policy: unless-stopped
    hostname: ldap
    published_ports:
      - "389:1389"
      - "1636:1636"
    env:
      LDAP_ADMIN_USERNAME: "admin"
      LDAP_ADMIN_PASSWORD: "password"
      LDAP_USERS: "pbm"
      LDAP_PASSWORDS: "pbmpass"
    networks:
      - name: test

- name: Register encrypted password
  community.docker.docker_container_exec:
    container: ldap
    command: slappasswd -s "{{ ldap_bind_pw }}"
  register: ldap_encrypted_password

- name: Show generated hash
  debug:
    var: ldap_encrypted_password.stdout

- name: Copy db templates
  template:
    src: db.ldif
    dest: /tmp

- name: Copy db templates to host
  community.docker.docker_container_copy_into:
    path: /tmp/db.ldif
    container_path: /tmp/db.ldif
    container: ldap

- name: Load db template into ldap
  community.docker.docker_container_exec:
    container: ldap
    command: ldapmodify -Y EXTERNAL  -H ldapi:/// -f /tmp/db.ldif

- name: Load some schemas
  community.docker.docker_container_exec:
    container: ldap
    command: ldapadd -Y EXTERNAL -H ldapi:/// -f {{schema_path}}/{{item}}
  register: ldap_result_code
  failed_when: ldap_result_code.rc not in [0, 80]
  changed_when: ldap_result_code.rc == 0
  loop:
    - cosine.ldif
    - nis.ldif
    - inetorgperson.ldif
  loop_control:
    label: "{{ item }}"

- name: Load ldap root entry
  ldap_entry:
    server_uri: "ldap://localhost:389"
    bind_dn: "{{ldap_basedn}}"
    bind_pw: "{{ldap_bind_pw}}"
    dn: "{{ldap_basedn}}"
    objectClass:
      - top
      - domain

- name: Load groups and users parent entry
  ldap_entry:
    server_uri: "{{ldap_server_uri}}"
    bind_dn: "{{ldap_basedn}}"
    bind_pw: "{{ldap_bind_pw}}"
    dn: "ou={{item}},{{ldap_basedn}}"
    objectClass:
      - organizationalUnit
      - top
  with_items:
    - groups
    - people

- name: Load users
  ldap_entry:
    server_uri: "{{ldap_server_uri}}"
    bind_dn: "{{ldap_basedn}}"
    bind_pw: "{{ldap_bind_pw}}"
    dn: "cn={{item.value.cn}},ou=people,{{ldap_basedn}}"
    objectClass:
      - person
      - organizationalPerson
      - inetOrgPerson
      - top
    attributes:
      cn: "{{item.value.cn}}"
      givenname: "{{item.value.givenname}}"
      sn: "{{item.value.sn}}"
      uid: "{{item.key}}"
      userpassword: "{{item.value.userpassword}}"
  with_dict: "{{ldap_users}}"

- name: Load groups
  ldap_entry:
    server_uri: "{{ldap_server_uri}}"
    bind_dn: "{{ldap_basedn}}"
    bind_pw: "{{ldap_bind_pw}}"
    dn: "cn={{item.name}},ou=groups,{{ldap_basedn}}"
    objectClass:
      - groupOfNames
      - top
    attributes:
      member: "cn=dummy,ou=people,{{ldap_basedn}}"
  with_items: "{{ldap_groups}}"

- name: Add users to groups
  ldap_attrs:
    server_uri: "{{ldap_server_uri}}"
    bind_dn: "{{ldap_basedn}}"
    bind_pw: "{{ldap_bind_pw}}"
    dn: "cn={{item.0.name}},ou=groups,{{ldap_basedn}}"
    attributes:
      member: "cn={{item.1}},ou=people,{{ldap_basedn}}"
    state: present
  with_subelements:
    - "{{ldap_groups}}"
    - members

- name: Remove dummy entry
  ldap_attrs:
    server_uri: "{{ldap_server_uri}}"
    bind_dn: "{{ldap_basedn}}"
    bind_pw: "{{ldap_bind_pw}}"
    dn: "cn={{item.name}},ou=groups,{{ldap_basedn}}"
    attributes:
      member: "cn=dummy,ou=people,{{ldap_basedn}}"
    state: absent
  with_items: "{{ldap_groups}}"