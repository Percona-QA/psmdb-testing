---
- include_vars: all.yml
- include_vars: "Debian-vars.yml"

- name: Ensure Docker network exists
  community.docker.docker_network:
    name: test
    driver: bridge
    state: present

- name: Remove any existing container
  community.docker.docker_container:
    name: ldap
    state: absent
    keep_volumes: false

- name: Copy entire ldif directory to host
  ansible.builtin.copy:
    src: templates
    dest: /tmp/ldifs/
    mode: "0644"
    directory_mode: "0755"

- name: Run OpenLDAP container
  docker_container:
    name: ldap
    image: bitnamilegacy/openldap:latest
    restart_policy: unless-stopped
    hostname: ldap
    published_ports:
      - "389:1389"
      - "1636:1636"
    env:
      LDAP_ROOT: "dc=percona,dc=com"
      LDAP_ADMIN_USERNAME: "admin"
      LDAP_ADMIN_PASSWORD: "secret"
      LDAP_SKIP_DEFAULT_TREE: "yes"
      LDAP_CUSTOM_LDIF_DIR: /tmp/ldifs/templates
    volumes: /tmp/ldifs:/tmp/ldifs:ro
    networks:
      - name: test

#- name: Load ldap root entry
#  ldap_entry:
#    server_uri: "ldap://localhost:389"
#    bind_dn: "{{ldap_basedn}}"
#    bind_pw: "{{ldap_bind_pw}}"
#    dn: "{{ldap_basedn}}"
#    objectClass:
#      - top
#      - domain
#
#- name: Load groups and users parent entry
#  ldap_entry:
#    server_uri: "{{ldap_server_uri}}"
#    bind_dn: "{{ldap_basedn}}"
#    bind_pw: "{{ldap_bind_pw}}"
#    dn: "ou={{item}},{{ldap_basedn}}"
#    objectClass:
#      - organizationalUnit
#      - top
#  with_items:
#    - groups
#    - people
#
#- name: Load users
#  ldap_entry:
#    server_uri: "{{ldap_server_uri}}"
#    bind_dn: "{{ldap_basedn}}"
#    bind_pw: "{{ldap_bind_pw}}"
#    dn: "cn={{item.value.cn}},ou=people,{{ldap_basedn}}"
#    objectClass:
#      - person
#      - organizationalPerson
#      - inetOrgPerson
#      - top
#    attributes:
#      cn: "{{item.value.cn}}"
#      givenname: "{{item.value.givenname}}"
#      sn: "{{item.value.sn}}"
#      uid: "{{item.key}}"
#      userpassword: "{{item.value.userpassword}}"
#  with_dict: "{{ldap_users}}"
#
#- name: Load groups
#  ldap_entry:
#    server_uri: "{{ldap_server_uri}}"
#    bind_dn: "{{ldap_basedn}}"
#    bind_pw: "{{ldap_bind_pw}}"
#    dn: "cn={{item.name}},ou=groups,{{ldap_basedn}}"
#    objectClass:
#      - groupOfNames
#      - top
#    attributes:
#      member: "cn=dummy,ou=people,{{ldap_basedn}}"
#  with_items: "{{ldap_groups}}"
#
#- name: Add users to groups
#  ldap_attrs:
#    server_uri: "{{ldap_server_uri}}"
#    bind_dn: "{{ldap_basedn}}"
#    bind_pw: "{{ldap_bind_pw}}"
#    dn: "cn={{item.0.name}},ou=groups,{{ldap_basedn}}"
#    attributes:
#      member: "cn={{item.1}},ou=people,{{ldap_basedn}}"
#    state: present
#  with_subelements:
#    - "{{ldap_groups}}"
#    - members
#
#- name: Remove dummy entry
#  ldap_attrs:
#    server_uri: "{{ldap_server_uri}}"
#    bind_dn: "{{ldap_basedn}}"
#    bind_pw: "{{ldap_bind_pw}}"
#    dn: "cn={{item.name}},ou=groups,{{ldap_basedn}}"
#    attributes:
#      member: "cn=dummy,ou=people,{{ldap_basedn}}"
#    state: absent
#  with_items: "{{ldap_groups}}"