- set_fact:
    ssh_user: "{{ lookup('env', 'SSH_USER') | default('none', true) }}"

- name: Install dependencies
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - ca-certificates
      - curl
  when: ansible_os_family == "Debian"

- name: Create keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  when:
    - ansible_os_family == "Debian"

- name: Download Docker repo key (ASCII)
  become: true
  get_url:
    url: "https://download.docker.com/linux/{{ 'ubuntu' if ansible_distribution == 'Ubuntu' else 'debian' }}/gpg"
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'
  register: docker_key_asc
  when: ansible_os_family == "Debian"

- name: Map architecture for Docker APT repo
  set_fact:
    docker_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else
                  'arm64' if ansible_architecture == 'aarch64' }}"

- name: Add Docker APT repository
  shell: |
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
         https://download.docker.com/linux/{{ 'ubuntu' if ansible_distribution == 'Ubuntu' else 'debian' }} \
         $(. /etc/os-release && echo ${UBUNTU_CODENAME:-$VERSION_CODENAME}) stable" \
    > /etc/apt/sources.list.d/docker.list
  when: ansible_os_family == "Debian"

- name: Update apt cache
  apt:
    update_cache: yes
  when:
    - ansible_os_family == "Debian"

- name: Install dependencies
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - git
      - python3-pip
      - wget
      - iputils-ping
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - docker-ce
      - docker-ce-cli
      - containerd.io
  when: ansible_os_family == "Debian"

- name: Enable and start Docker service
  service:
    name: docker
    state: started
    enabled: true

- name: Ensure docker group exists
  group:
    name: docker
    state: present

- name: Add user ssh-user to docker group
  user:
    name: "{{ ssh_user }}"
    groups: docker
    append: yes
