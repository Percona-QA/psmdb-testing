---
- name: Side Effect
  hosts: all
  become: true
  become_method: sudo
  tasks:
    - set_fact:
        layout_type: "{{ lookup('env', 'LAYOUT_TYPE') | default('single', true) }}"

    - set_fact:
        storage: "{{ lookup('env', 'STORAGE') | default('wiredTiger', true) }}"    

    - set_fact:
        encryption: "{{ lookup('env', 'ENCRYPTION') | default('NONE', true) }}"

    - set_fact:
        encryption: "NONE"
      when: storage == "inMemory"

    - set_fact:
        cipher: "{{ lookup('env', 'CIPHER') | default('AES256-CBC', true) }}"

    - set_fact:
        keyfile: "/package-testing/scripts/psmdb_encryption/mongodb-keyfile"

    - set_fact:
        vault_token: "/package-testing/scripts/psmdb_encryption/mongodb-test-vault-token"

    - set_fact:
        vault_cert: "/package-testing/scripts/psmdb_encryption/test.cer"

    - set_fact:
        vault_secret: "secret_v2/data/psmdb-test/package-test"

    - set_fact:
        mongo_opts: " --wiredTigerCacheSizeGB 0.25 --enableEncryption --encryptionKeyFile {{ keyfile }} --encryptionCipherMode {{  cipher }}"
      when: encryption == "KEYFILE"

    - set_fact:
        mongo_opts: " --wiredTigerCacheSizeGB 0.25 --enableEncryption --vaultServerName 127.0.0.1 --vaultPort 8200 --vaultTokenFile {{ vault_token }} --vaultSecret {{ vault_secret }} --vaultServerCAFile {{ vault_cert }} --encryptionCipherMode {{  cipher }}"
      when: encryption == "VAULT"

    - set_fact:
        mongo_opts: " --storageEngine {{ storage }} --wiredTigerCacheSizeGB 0.25"
      when: encryption == "NONE" and storage == "wiredTiger"

    - set_fact:
        mongo_opts: " --storageEngine {{ storage }} --inMemorySizeGB 0.25"
      when: encryption == "NONE" and storage == "inMemory"

    - set_fact:
        old_tarball: "{{ lookup('env', 'OLD_TARBALL') | default('https://downloads.percona.com/downloads/percona-server-mongodb-4.2/percona-server-mongodb-4.2.15-16/binary/tarball/percona-server-mongodb-4.2.15-16-x86_64.glibc2.17-minimal.tar.gz', true) }}"
       
    - set_fact:
        new_tarball: "{{ lookup('env', 'NEW_TARBALL') | default('https://downloads.percona.com/downloads/percona-server-mongodb-LATEST/percona-server-mongodb-4.4.8-9/binary/tarball/percona-server-mongodb-4.4.8-9-x86_64.glibc2.17-minimal.tar.gz', true) }}"

    - name: get mongodb old version
      set_fact:
        mongodb_old_ver: "{{ old_tarball | regex_search('mongodb-([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') }}"

    - name: get mongodb new version
      set_fact:
        mongodb_new_ver: "{{ new_tarball | regex_search('mongodb-([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') }}"

    - name: get mongodb prev maj version
      set_fact:
        mongodb_prev_maj_ver: "{{ old_tarball | regex_search('mongodb-([0-9]\\.[0-9])', '\\1') }}"

    - name: debug mongodb prev maj version
      debug:
        msg: "{{ mongodb_prev_maj_ver[0] }}"

    - name: get mongodb new maj version
      set_fact:
        mongodb_new_maj_ver: "{{ new_tarball | regex_search('mongodb-([0-9]\\.[0-9])', '\\1') }}"

    - name: debug mongodb new maj version
      debug:
        msg: "{{ mongodb_new_maj_ver[0] }}"

    - name: get test db hash before upgrade
      shell: |
        /mongo-old-bindir/bin/mongo mgodatagen_test --eval "db.runCommand({ dbHash: 1 }).md5" --quiet
      register: ohash
      when: layout_type == "single"
    
    - set_fact: old_hash="{{ohash.stdout}}"
      when: ohash.changed

    - name: get test db hash before upgrade
      shell: |
        /mongo-old-bindir/bin/mongo mongodb://127.0.0.1/mgodatagen_test?replicaSet=rs0 --eval "db.runCommand({ dbHash: 1 }).md5" --quiet | tail -1
      register: ohash
      when: layout_type == "replicaset"

    - set_fact: old_hash="{{ohash.stdout}}"
      when: ohash.changed

    - name: get test db hash before upgrade
      shell: |
        /mongo-old-bindir/bin/mongo mongodb://127.0.0.1:28017/mgodatagen_test?replicaSet=rs0 --eval "db.runCommand({ dbHash: 1 }).md5" --quiet | tail -1
        /mongo-old-bindir/bin/mongo mongodb://127.0.0.1:29017/mgodatagen_test?replicaSet=rs1 --eval "db.runCommand({ dbHash: 1 }).md5" --quiet | tail -1
      register: ohash
      when: layout_type == "sharded"

    - set_fact: old_hash="{{ohash.stdout}}"
      when: ohash.changed

    - name: debug old hash
      debug:
        msg: "{{old_hash}}"

    - name: set compatibilty version for downgrade single
      shell: |
        /mongo-old-bindir/bin/mongo --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{mongodb_new_maj_ver[0]}}" })'
        sleep 10
      when: mongodb_prev_maj_ver > mongodb_new_maj_ver and layout_type == "single"

    - name: set compatibilty version for downgrade replicaset
      shell: |
        /mongo-old-bindir/bin/mongo mongodb://127.0.0.1/?replicaSet=rs0 --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{mongodb_new_maj_ver[0]}}" })'
        sleep 10
      when: mongodb_prev_maj_ver > mongodb_new_maj_ver and layout_type == "replicaset"

    - name: set compatibilty version for downgrade sharded
      shell: |
        /mongo-old-bindir/bin/mongo --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{mongodb_new_maj_ver[0]}}" })'
        sleep 10
      when: mongodb_prev_maj_ver > mongodb_new_maj_ver and layout_type == "sharded"

    - name: stop balancer for sharded
      command: /mongo-old-bindir/bin/mongo --quiet --eval "sh.stopBalancer()"
      when: layout_type == "sharded"

    - name: check balancer state for sharded
      command: /mongo-old-bindir/bin/mongo --quiet --eval "sh.getBalancerState()"
      register: balancer_state
      when: layout_type == "sharded"

    - name: debug balancer state for sharded
      debug:
        msg: "{{balancer_state.stdout}}"
      when: layout_type == "sharded"      

    - name: Check that bin directory exists
      stat:
        path: /mongo-new-bindir
      register: mongo_dir

    - name: Copy tarball
      copy:
        src: /tmp/percona-server-mongodb-new-{{mongodb_new_ver[0]}}.tar.gz
        dest: /tmp/percona-server-mongodb-new.tar.gz
        mode: '0644'
      when: not mongo_dir.stat.exists

    - name: Unpack new tarball
      unarchive:
        src: /tmp/percona-server-mongodb-new.tar.gz
        dest: /
        remote_src: yes
        extra_opts:
        - --transform
        - 's,^/*[^/]*,/mongo-new-bindir,S'
      when: not mongo_dir.stat.exists

    - name: Update single mongo
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/single --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/single --port 27017 {{ mongo_opts }}
      when: layout_type == "single"      

    - name: Update first secondary rs0
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/rs0-2 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/rs0-2 --port 27018 --replSet rs0 {{ mongo_opts }}
      when: layout_type == "replicaset"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: rs0
        poll: 3
        interval: 10
      when: layout_type == "replicaset"

    - name: Update second secondary rs0
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/rs0-3 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/rs0-3 --port 27019 --replSet rs0 {{ mongo_opts }}
      when: layout_type == "replicaset"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: rs0
        poll: 3
        interval: 10
      when: layout_type == "replicaset"
     
    - name: Update primary rs0
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongo --quiet --eval 'rs.stepDown()'
        - sleep 1
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/rs0-1 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/rs0-1 --port 27017 --replSet rs0 {{ mongo_opts }}
      when: layout_type == "replicaset"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: rs0
        poll: 3
        interval: 10
      when: layout_type == "replicaset"

    - name: Update first secondary cfg
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/cfg1-2 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/cfg1-2 --port 30018 --configsvr --replSet cfg {{ mongo_opts }}
      when: layout_type == "sharded"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: cfg
        login_port: 30017
        poll: 3
        interval: 10
      when: layout_type == "sharded"

    - name: Update second secondary cfg
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/cfg1-3 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/cfg1-3 --port 30019 --configsvr --replSet cfg {{ mongo_opts }}
      when: layout_type == "sharded"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: cfg
        login_port: 30017
        poll: 3
        interval: 10
      when: layout_type == "sharded"

    - name: Update primary cfg
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongo mongodb://127.0.0.1:30017 --quiet --eval 'rs.stepDown()'
        - sleep 1
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/cfg1-1 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/cfg1-1 --port 30017 --configsvr --replSet cfg {{ mongo_opts }}
      when: layout_type == "sharded"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: cfg
        login_port: 30017
        poll: 3
        interval: 10
      when: layout_type == "sharded"

    - name: Update first secondary rs0
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/rs0-2 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/rs0-2 --port 28018 --shardsvr --replSet rs0 {{ mongo_opts }}
      when: layout_type == "sharded"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: rs0
        login_port: 28017
        poll: 3
        interval: 10
      when: layout_type == "sharded"

    - name: Update second secondary rs0
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/rs0-3 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/rs0-3 --port 28019 --shardsvr --replSet rs0 {{ mongo_opts }}
      when: layout_type == "sharded"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: rs0
        login_port: 28017
        poll: 3
        interval: 10
      when: layout_type == "sharded"

    - name: Update primary rs0
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongo mongodb://127.0.0.1:28017 --quiet --eval 'rs.stepDown()'
        - sleep 1
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/rs0-1 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/rs0-1 --port 28017 --shardsvr --replSet rs0 {{ mongo_opts }}
      when: layout_type == "sharded"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: rs0
        login_port: 28017
        poll: 3
        interval: 10
      when: layout_type == "sharded"

    - name: Update first secondary rs1
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/rs1-2 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/rs1-2 --port 29018 --shardsvr --replSet rs1 {{ mongo_opts }}
      when: layout_type == "sharded"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: rs1
        login_port: 29017
        poll: 3
        interval: 10
      when: layout_type == "sharded"

    - name: Update second secondary rs1
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/rs1-3 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/rs1-3 --port 29019 --shardsvr --replSet rs1 {{ mongo_opts }}
      when: layout_type == "sharded"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: rs1
        login_port: 29017
        poll: 3
        interval: 10
      when: layout_type == "sharded"

    - name: Update primary rs1
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongo mongodb://127.0.0.1:29017 --quiet --eval 'rs.stepDown()'
        - sleep 1
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/rs1-1 --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/rs1-1 --port 29017 --shardsvr --replSet rs1 {{ mongo_opts }}
      when: layout_type == "sharded"

    - name: Ensure replicaset is stable
      community.mongodb.mongodb_status:
        replica_set: rs1
        login_port: 29017
        poll: 3
        interval: 10
      when: layout_type == "sharded"

    - name: update mongos
      command: "{{ item }}"
      with_items:
        - killall -9 mongos
        - /mongo-new-bindir/bin/mongos --fork --syslog --configdb cfg/localhost:30017,localhost:30018,localhost:30019 --port 27017 --bind_ip 0.0.0.0
      when: layout_type == "sharded"

    - name: start balancer for sharded
      command: /mongo-new-bindir/bin/mongo --quiet --eval "sh.startBalancer()"
      when: layout_type == "sharded"

    - name: check balancer state for sharded
      command: /mongo-new-bindir/bin/mongo --quiet --eval "sh.getBalancerState()"
      register: balancer_state
      when: layout_type == "sharded"

    - name: debug balancer state for sharded
      debug:
        msg: "{{balancer_state.stdout}}"
      when: layout_type == "sharded"

    - name: set compatibilty version after upgrade single
      shell: |
        /mongo-new-bindir/bin/mongo --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{mongodb_new_maj_ver[0]}}" })'
      when: mongodb_prev_maj_ver < mongodb_new_maj_ver and layout_type == "single"

    - name: set compatibilty version after upgrade sharded
      shell: |
        /mongo-new-bindir/bin/mongo mongodb://127.0.0.1/?replicaSet=rs0 --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{mongodb_new_maj_ver[0]}}" })'
      when: mongodb_prev_maj_ver < mongodb_new_maj_ver and layout_type == "replicaset"

    - name: set compatibilty version after upgrade single
      shell: |
        /mongo-new-bindir/bin/mongo --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{mongodb_new_maj_ver[0]}}" })'
      when: mongodb_prev_maj_ver < mongodb_new_maj_ver and layout_type == "sharded"

    - name: get test db hash after upgrade
      shell: |
        /mongo-new-bindir/bin/mongo mgodatagen_test --eval "db.runCommand({ dbHash: 1 }).md5" --quiet
      register: nhash
      when: layout_type == "single"

    - set_fact: new_hash="{{nhash.stdout}}"
      when: nhash.changed

    - name: get test db hash after upgrade
      shell: |
        /mongo-new-bindir/bin/mongo mongodb://127.0.0.1/mgodatagen_test?replicaSet=rs0 --eval "db.runCommand({ dbHash: 1 }).md5" --quiet | tail -1
      register: nhash
      when: layout_type == "replicaset"

    - set_fact: new_hash="{{nhash.stdout}}"
      when: nhash.changed

    - name: get test db hash after upgrade
      shell: |
        /mongo-new-bindir/bin/mongo mongodb://127.0.0.1:28017/mgodatagen_test?replicaSet=rs0 --eval "db.runCommand({ dbHash: 1 }).md5" --quiet | tail -1
        /mongo-new-bindir/bin/mongo mongodb://127.0.0.1:29017/mgodatagen_test?replicaSet=rs1 --eval "db.runCommand({ dbHash: 1 }).md5" --quiet | tail -1
      register: nhash
      when: layout_type == "sharded"

    - set_fact: new_hash="{{nhash.stdout}}"
      when: nhash.changed

    - name: debug new hash
      debug:
        msg: "{{new_hash}}"

    - name: compare hashes
      fail:
        msg: "fail in compare db hashes"
      when: new_hash != old_hash 
