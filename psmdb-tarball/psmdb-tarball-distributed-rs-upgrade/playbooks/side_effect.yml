---
- name: Side Effect
  hosts: all
  become: true
  become_method: sudo
  tasks:
    - set_fact:
        storage: "{{ lookup('env', 'STORAGE') | default('wiredTiger', true) }}"    

    - set_fact:
        encryption: "{{ lookup('env', 'ENCRYPTION') | default('NONE', true) }}"
      when: storage == "wiredTiger"   

    - name: check correct encryption
      fail:
        msg: incorrect encryption {{ encryption }}
      when: encryption != "NONE" and encryption != "VAULT" and encryption != "KEYFILE"

    - set_fact:
        encryption: "NONE"
      when: storage == "inMemory"

    - set_fact:
        cipher: "{{ lookup('env', 'CIPHER') | default('AES256-CBC', true) }}"

    - set_fact:
        keyfile: "/package-testing/scripts/psmdb_encryption/mongodb-keyfile"

    - set_fact:
        vault_token: "/package-testing/scripts/psmdb_encryption/mongodb-test-vault-token"

    - set_fact:
        vault_cert: "/package-testing/scripts/psmdb_encryption/test.cer"

    - set_fact:
        vault_secret: "secret_v2/data/psmdb-test/package-test"

    - set_fact:
        mongo_opts: " --wiredTigerCacheSizeGB 0.25 --enableEncryption --encryptionKeyFile {{ keyfile }} --encryptionCipherMode {{  cipher }}"
      when: encryption == "KEYFILE"

    - set_fact:
        mongo_opts: " --wiredTigerCacheSizeGB 0.25 --enableEncryption --vaultServerName 127.0.0.1 --vaultPort 8200 --vaultTokenFile {{ vault_token }} --vaultSecret {{ vault_secret }} --vaultServerCAFile {{ vault_cert }} --encryptionCipherMode {{  cipher }}"
      when: encryption == "VAULT"

    - set_fact:
        mongo_opts: " --storageEngine {{ storage }} --wiredTigerCacheSizeGB 0.25"
      when: encryption == "NONE" and storage == "wiredTiger"

    - set_fact:
        mongo_opts: " --storageEngine {{ storage }} --inMemorySizeGB 0.25"
      when: encryption == "NONE" and storage == "inMemory"

    - set_fact:
        old_tarball: "{{ lookup('env', 'OLD_TARBALL') | default('https://downloads.percona.com/downloads/percona-server-mongodb-4.2/percona-server-mongodb-4.2.15-16/binary/tarball/percona-server-mongodb-4.2.15-16-x86_64.glibc2.17-minimal.tar.gz', true) }}"
       
    - set_fact:
        new_tarball: "{{ lookup('env', 'NEW_TARBALL') | default('https://downloads.percona.com/downloads/percona-server-mongodb-LATEST/percona-server-mongodb-4.4.8-9/binary/tarball/percona-server-mongodb-4.4.8-9-x86_64.glibc2.17-minimal.tar.gz', true) }}"

    - name: get mongodb prev maj version
      set_fact:
        mongodb_prev_maj_ver: "{{ old_tarball | regex_search('mongodb-([0-9]\\.[0-9])', '\\1') }}"

    - name: debug mongodb prev maj version
      debug:
        msg: "{{ mongodb_prev_maj_ver[0] }}"

    - name: get mongodb new maj version
      set_fact:
        mongodb_new_maj_ver: "{{ new_tarball | regex_search('mongodb-([0-9]\\.[0-9])', '\\1') }}"

    - name: debug mongodb new maj version
      debug:
        msg: "{{ mongodb_new_maj_ver[0] }}"

    - name: set compatibilty version for downgrade
      shell: |
        /mongo-old-bindir/bin/mongo mongo://127.0.0.1/?replicaSet=rs0 --quiet --eval "db.adminCommand({setFeatureCompatibilityVersion: '{{mongodb_new_maj_version[0]}}' })"
      register: set_version
      when: mongodb_prev_maj_ver > mongodb_new_maj_ver and inventory_hostname in groups['primary']

    - name: Download new tarball
      get_url:
        url: '{{ new_tarball }}'
        dest: /tmp/percona-server-mongodb-new.tar.gz
        mode: '0644'
      when: new_tarball.startswith('http')

    - name: Download new tarball
      aws_s3:
        bucket: "{{ new_tarball | urlsplit('hostname') }}"
        object: "{{ new_tarball | urlsplit('path') }}"
        dest: /tmp/percona-server-mongodb-new.tar.gz
        mode: get
      when: new_tarball.startswith('s3')

    - name: Unpack new tarball
      unarchive:
        src: /tmp/percona-server-mongodb-new.tar.gz
        dest: /
        remote_src: yes
        extra_opts:
        - --transform
        - 's,^/*[^/]*,/mongo-new-bindir,S'

    - name: Update first secondary
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/data --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/data --port 27017 --bind_ip 0.0.0.0 --replSet rs0 {{ mongo_opts }}
        - /usr/bin/sleep 10
      when: inventory_hostname == groups['secondary'][0]

    - name: Update second secondary
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/data --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/data --port 27017 --bind_ip 0.0.0.0 --replSet rs0 {{ mongo_opts }}
        - /usr/bin/sleep 10
      when: inventory_hostname == groups['secondary'][1]
     
    - name: Update primary
      command: "{{ item }}"
      with_items:
        - /mongo-old-bindir/bin/mongo --quiet --eval 'rs.stepDown()'
        - /usr/bin/sleep 10
        - /mongo-old-bindir/bin/mongod --dbpath /workdir/data --shutdown
        - /mongo-new-bindir/bin/mongod --fork --syslog --dbpath /workdir/data --port 27017 --bind_ip 0.0.0.0 --replSet rs0 {{ mongo_opts }}
        - /usr/bin/sleep 10
      when: inventory_hostname in groups['primary']      

    - name: set compatibilty version after upgrade
      shell: |
        /mongo-new-bindir/bin/mongo mongodb://127.0.0.1/?replicaSet=rs0 --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{mongodb_new_maj_ver[0]}}" })'
      when: mongodb_prev_maj_ver < mongodb_new_maj_ver and inventory_hostname in groups['primary']
      register: primary

    - name: debug shell
      debug:
        msg: "{{primary.stdout}}"
      when: inventory_hostname in groups['primary']      

