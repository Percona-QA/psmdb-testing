---
# tasks file for PSMDB
- set_fact:
    from_repo_pro: "{{ lookup('env', 'FROM_REPO_PRO') }}"

- name: remove the Percona apt main repository
  apt_repository: repo='deb http://repo.percona.com/apt {{ ansible_distribution_release }} main' state=absent update_cache=yes
  when: ansible_os_family == "Debian"

- name: remove the Percona apt testing repositories
  apt_repository: repo='deb http://repo.percona.com/apt {{ ansible_distribution_release }} testing' state=absent update_cache=yes
  when: ansible_os_family == "Debian"

- name: remove the Percona yum repositories
  yum: name=percona-release state=absent
  when: ansible_os_family == "RedHat"

- name: remove saved repo files in yum
  file: path={{ item }} state=absent
  with_items:
    - /etc/yum.repos.d/percona-release.repo
    - /etc/yum.repos.d/percona-release.repo.rpmsave
  when: ansible_os_family == "RedHat"

- name: Install percona release package
  include_tasks: ../../../tasks/install_percona_release.yml

- name: enable psmdb repo
  command: percona-release enable psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }} {{ repo }}
  vars:
    repo: "{{ lookup('env', 'FROM_REPO') }}"
    version: "{{ lookup('env', 'FROM_PSMDB_VERSION') }}"

- name: Create yum repo for PRO build
  blockinfile:
    path: /etc/yum.repos.d/percona-pro.repo
    mode: '0640'
    create: true
    block: |
      [percona-pro]
      name=[psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }}-pro-{{ repo }}-x86_64]
      baseurl=http://repo.percona.com/private/{{ client_id }}-{{ client_token }}/psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }}-pro/yum/{{ repo }}/{{ ansible_distribution_major_version }}/RPMS/{{ ansible_architecture }}
      enabled=1
      gpgcheck=0
      sslverify=0
  vars:
    client_id: "{{ lookup('env', 'USERNAME') }}"
    client_token: "{{ lookup('env', 'PASSWORD') }}"
    repo: "{{ lookup('env', 'FROM_REPO') }}"
    version: "{{ lookup('env', 'FROM_PSMDB_VERSION') }}"
  when: ansible_os_family == "RedHat" and from_repo_pro == true

- name: create apt repo for PRO build
  apt_repository: repo='deb http://repo.percona.com/private/{{ client_id }}-{{ client_token }}/psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }}-pro/apt/ {{ ansible_distribution_release }} {{ repo }}' state=present update_cache=yes
  vars:
    client_id: "{{ lookup('env', 'USERNAME') }}"
    client_token: "{{ lookup('env', 'PASSWORD') }}"
    repo: "{{ 'main' if lookup('env', 'FROM_REPO') == 'release' else lookup('env', 'FROM_REPO') }}"
    version: "{{ lookup('env', 'FROM_PSMDB_VERSION') }}"
  when: ansible_os_family == "Debian" and from_repo_pro == true

- block:
    - name: include tasks for PSMDB install
      include_tasks: ../../../tasks/install_psmdb.yml
      vars:
        psmdb_to_test: "{{ lookup('env', 'FROM_PSMDB_VERSION') }}"
        dbg_packages: false
        psmdb_pkg_name_addon: "{{ '-pro' if from_repo_pro == true else '' }}"
  environment:
    PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
    PERCONA_TELEMETRY_DISABLE: "1"

- name: Check if telemetry is disabled
  stat: path=/usr/local/percona/telemetry_uuid
  register: telemetry_uuid

- name: Fail if telemetry is sent
  fail: msg="Telemetry is sent despite it's disabled"
  when: telemetry_uuid.stat.exists

- name: start mongod service
  service: name=mongod state=started

- name: check mongod ready status
  shell: mongo --quiet --eval="printjson(db.serverStatus().ok)"
  register: mongodbready
  until: mongodbready.stdout | int == 1
  retries: 20
  delay: 1

- name: download package-testing repo with wget
  command: "{{ item }}"
  with_items:
    - rm -rf /package-testing
    - rm -f master.zip
    - wget --no-check-certificate -O main.zip https://github.com/Percona-QA/psmdb-testing/archive/refs/heads/main.zip
    - unzip main.zip
    - rm -f main.zip
    - mv psmdb-testing-main /package-testing

- name: install latest bats from github
  command: "{{ item }}"
  with_items:
    - rm -f master.zip
    - wget --no-check-certificate -O master.zip https://github.com/sstephenson/bats/archive/master.zip
    - unzip master.zip
    - rm -f master.zip
    - bats-master/install.sh /usr/local
    - rm -rf bats-master

- name: Install and configure vault
  include_role:
   name: ../../../roles/vault
  when:
    lookup('env', 'ENCRYPTION') == "VAULT"

- name: Enable Vault encryption
  include_tasks: ../../../tasks/enable_vault_encryption.yml
  when:
    lookup('env', 'ENCRYPTION') == "VAULT"

- name: Enable keyfile encryption
  include_tasks: ../../../tasks/enable_keyfile_encryption.yml
  when:
    lookup('env', 'ENCRYPTION') == "KEYFILE"

- name: Install and configure KMIP
  include_role:
   name: ../../../roles/kmip
  when: lookup('env', 'ENCRYPTION') == "KMIP"

- name: Enable KMIP encryption
  include_tasks: ../../../tasks/enable_kmip_encryption.yml
  when: lookup('env', 'ENCRYPTION') == "KMIP"

- name: Load some data
  command: /package-testing/scripts/mongo_insert.sh
