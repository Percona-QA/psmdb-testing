---
- name: Side Effect
  hosts: all
  vars:
    to_repo: "{{ lookup('env', 'TO_REPO') }}"
    from_repo: "{{ lookup('env', 'FROM_REPO') }}"
    to_version: "{{ lookup('env', 'TO_PSMDB_VERSION') }}"
    from_version: "{{ lookup('env', 'FROM_PSMDB_VERSION') }}"
  become: true
  become_method: sudo
  environment:
    PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
    PERCONA_TELEMETRY_DISABLE: "1"
  tasks:
    - set_fact: to_maj_version={{ to_version.split('.')[0] }}.{{ to_version.split('.')[1] }}

    - set_fact: from_maj_version={{ from_version.split('.')[0] }}.{{ from_version.split('.')[1] }}

    - set_fact: psmdb_mongosh={{ to_version.split('.')[0] }}

    - set_fact: from_repo_pro="{{ lookup('env', 'FROM_REPO_PRO') }}"

    - set_fact: to_repo_pro="{{ lookup('env', 'TO_REPO_PRO') }}"

    - name: check maj version
      debug: msg={{to_maj_version}}_{{from_maj_version}}

    - name: set compatibilty version for downgrade
      shell: |
        mongo --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{to_maj_version}}" })'
      register: set_version
      when: from_maj_version > to_maj_version

    - name: stop mongod service
      service:
        name: mongod
        state: stopped

    - name: install necessary deb packages for downgrade
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: present
      vars:
        packages:
        - dialog
        - apt-utils
      when: ansible_os_family == "Debian" and from_version is version(to_version, '>')

    - name: Set extra suffix for pkg name
      set_fact:
        psmdb_pkg_name_addon: "{{ '-pro' if from_repo_pro == true else '' }}"

    - name: uninstall psmdb deb packages for downgrade
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: absent
      vars:
        packages:
        - percona-server-mongodb{{ psmdb_pkg_name_addon }}
        - percona-mongodb-mongosh
        - percona-server-mongodb-server{{ psmdb_pkg_name_addon }}
        - percona-server-mongodb-mongos{{ psmdb_pkg_name_addon }}
        - percona-server-mongodb-shell
        - percona-server-mongodb-tools
#        - percona-server-mongodb-dbg
      when: ansible_os_family == "Debian" and from_version is version(to_version, '>')

    - name: uninstall psmdb rpm packages for downgrade
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: absent
      vars:
        packages:
        - percona-server-mongodb{{ psmdb_pkg_name_addon }}
        - percona-mongodb-mongosh
        - percona-server-mongodb-server{{ psmdb_pkg_name_addon }}
        - percona-server-mongodb-mongos{{ psmdb_pkg_name_addon }}
        - percona-server-mongodb-shell
        - percona-server-mongodb-tools
#        - percona-server-mongodb-debugsource
#        - percona-server-mongodb-shell-debuginfo
#        - percona-server-mongodb-tools-debuginfo
#        - percona-server-mongodb-mongos-debuginfo
#        - percona-server-mongodb-server-debuginfo
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8" and from_version is version(to_version, '>')

    - name: uninstall psmdb rpm packages for downgrade
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: absent
      vars:
        packages:
        - percona-server-mongodb{{ psmdb_pkg_name_addon }}
        - percona-mongodb-mongosh
        - percona-server-mongodb-server{{ psmdb_pkg_name_addon }}
        - percona-server-mongodb-mongos{{ psmdb_pkg_name_addon }}
        - percona-server-mongodb-shell
        - percona-server-mongodb-tools
#        - percona-server-mongodb-debuginfo
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version <= "7" and (from_version is version(to_version, '>') or to_repo_pro or from_repo_pro)

    - name: disable all repos
      command: percona-release disable all

    - name: enable new psmdb repo
      command: percona-release enable psmdb-{{ to_version.split('.')[0] }}{{ to_version.split('.')[1] }} {{ to_repo }}

    - name: Create yum repo for PRO build
      blockinfile:
        path: /etc/yum.repos.d/percona-pro.repo
        mode: '0640'
        create: true
        block: |
          [percona-pro]
          name=[psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }}-pro-{{ repo }}-x86_64]
          baseurl=http://repo.percona.com/private/{{ client_id }}-{{ client_token }}/psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }}-pro/yum/{{ repo }}/{{ ansible_distribution_major_version }}/RPMS/x86_64
          enabled=1
          gpgcheck=0
          sslverify=0
      vars:
        client_id: "{{ lookup('env', 'USERNAME') }}"
        client_token: "{{ lookup('env', 'PASSWORD') }}"
        repo: "{{ lookup('env', 'TO_REPO') }}"
        version: "{{ lookup('env', 'TO_PSMDB_VERSION') }}"
      when: ansible_os_family == "RedHat" and to_repo_pro == true

    - name: create apt repo for PRO build
      apt_repository: repo='deb http://repo.percona.com/private/{{ client_id }}-{{ client_token }}/psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }}-pro/apt/ {{ ansible_distribution_release }} {{ repo }}' state=present update_cache=yes
      vars:
        client_id: "{{ lookup('env', 'USERNAME') }}"
        client_token: "{{ lookup('env', 'PASSWORD') }}"
        repo: "{{ 'main' if lookup('env', 'REPO') == 'release' else lookup('env', 'REPO') }}"
        version: "{{ lookup('env', 'TO_PSMDB_VERSION') }}"
      when: ansible_os_family == "Debian" and to_repo_pro == true

    - name: Set extra suffix for pkg name
      set_fact:
        psmdb_pkg_name_addon: "{{ '-pro' if to_repo_pro == true else '' }}"

    - name: update psmdb deb packages
      apt:
        name: "{{ packages }}"
        update_cache: yes
      vars:
        packages:
        - percona-server-mongodb{{ psmdb_pkg_name_addon }}={{ to_version }}*
        - percona-server-mongodb-server{{ psmdb_pkg_name_addon }}={{ to_version }}*
        - percona-server-mongodb-mongos{{ psmdb_pkg_name_addon }}={{ to_version }}*
        - percona-server-mongodb-tools={{ to_version }}*
#        - percona-server-mongodb-dbg={{ to_version }}*
      when: ansible_os_family == "Debian"

    - name: update mongo shell deb packages
      apt:
        name: "{{ packages }}"
        update_cache: yes
      vars:
        packages:
        - percona-server-mongodb-shell={{ to_version }}*
      when: ansible_os_family == "Debian" and psmdb_mongosh < "6"

    - name: update mongosh deb packages
      apt:
        name: "{{ packages }}"
        update_cache: yes
      vars:
        packages:
        - percona-mongodb-mongosh
      when: ansible_os_family == "Debian" and psmdb_mongosh >= "6"

    - name: update psmdb rpm packages
      dnf:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
        allowerasing: "{{ 'true' if (from_repo_pro == true or to_repo_pro == true) else 'false' }}"
      vars:
        packages:
        - percona-server-mongodb{{ psmdb_pkg_name_addon }}-{{ to_version }}
        - percona-server-mongodb-server{{ psmdb_pkg_name_addon }}-{{ to_version }}
        - percona-server-mongodb-mongos{{ psmdb_pkg_name_addon }}-{{ to_version }}
        - percona-server-mongodb-tools-{{ to_version }}
#        - percona-server-mongodb-debugsource-{{ to_version }}
#        - percona-server-mongodb-tools-debuginfo-{{ to_version }}
#        - percona-server-mongodb-mongos-debuginfo-{{ to_version }}
#        - percona-server-mongodb-server-debuginfo-{{ to_version }}
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version >= "8"

    - name: update psmdb rpm packages
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - percona-server-mongodb{{ psmdb_pkg_name_addon }}-{{ to_version }}
        - percona-server-mongodb-server{{ psmdb_pkg_name_addon }}-{{ to_version }}
        - percona-server-mongodb-mongos{{ psmdb_pkg_name_addon }}-{{ to_version }}
        - percona-server-mongodb-tools-{{ to_version }}
#        - percona-server-mongodb-debuginfo-{{ to_version }}
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version <= "7"

    - name: update mongo shell rpm packages
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - percona-server-mongodb-shell-{{ to_version }}
#        - percona-server-mongodb-shell-debuginfo-{{ to_version }}
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version >= "8" and psmdb_mongosh < "6"

    - name: update mongo shell rpm packages
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - percona-server-mongodb-shell-{{ to_version }}
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version <= "7" and psmdb_mongosh < "6"

    - name: update mongosh rpm packages
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - percona-mongodb-mongosh
      when: ansible_os_family == "RedHat" and psmdb_mongosh >= "6"

    - name: Check if telemetry is disabled
      stat: path=/usr/local/percona/telemetry_uuid
      register: telemetry_uuid

    - name: Fail if telemetry is sent
      fail: msg="Telemetry is sent despite it's disabled"
      when: telemetry_uuid.stat.exists

    - name: copy mongosh binary to mongo path for test scripts
      copy:
        src: /usr/bin/mongosh
        dest: /usr/bin/mongo
        remote_src: true
        mode: '0755'
      when: psmdb_mongosh >= "6"

    - name: perform daemon-reload for systemd-based os
      systemd:
        daemon_reload: yes
      when: ansible_service_mgr == "systemd"

    - name: Check if /etc/mongod.conf.rpmsave exists
      stat:
        path: /etc/mongod.conf.rpmsave
      register: stat_rpmsave

    - name: If necessary replace mongod.conf with rpmsave
      copy:
        remote_src: yes
        src: "/etc/mongod.conf.rpmsave"
        dest: /etc/mongod.conf
      when: stat_rpmsave.stat.exists

### all of this make sense until PSMDB-918      
    - name: Check if vault-token exists
      stat:
        path: /package-testing/scripts/psmdb_encryption/mongodb-test-vault-token
      register: stat_token

    - name: Ensure vault-token has correct permissions
      file:
        path: /package-testing/scripts/psmdb_encryption/mongodb-test-vault-token
        owner: mongod
        group: mongod
        mode: '0400'
      when: stat_token.stat.exists

    - name: Check if vault crt exists
      stat:
        path: /package-testing/scripts/psmdb_encryption/test.cer
      register: stat_crt

    - name: Ensure vault crt has correct permissions
      file:
        path: /package-testing/scripts/psmdb_encryption/test.cer
        owner: mongod
        group: mongod
        mode: '0400'
      when:  stat_crt.stat.exists

    - name: Check if keyfile exists
      stat:
        path: /package-testing/scripts/psmdb_encryption/mongodb-keyfile
      register: stat_key

    - name: Ensure keyfile has correct permissions
      file:
        path: /package-testing/scripts/psmdb_encryption/mongodb-keyfile
        owner: mongod
        group: mongod
        mode: '0400'
      when:  stat_key.stat.exists

    - name: change permissions to mongodb directory after downgrade
      file:
        path: /var/lib/mongo
        state: directory
        recurse: yes
        owner: mongod
        group: mongod
      when: from_version > to_version
### EOF

    - name: start mongod service
      service:
        name: mongod
        state: started

    - name: set compatibilty version after upgrade
      shell: |
        mongo --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{to_maj_version}}" })'
      when: from_maj_version < to_maj_version
