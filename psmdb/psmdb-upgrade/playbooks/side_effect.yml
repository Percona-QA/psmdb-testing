---
- name: Side Effect
  hosts: all
  vars:
    to_repo: "{{ lookup('env', 'TO_REPO') }}"
    from_repo: "{{ lookup('env', 'FROM_REPO') }}"
    to_version: "{{ lookup('env', 'TO_PSMDB_VERSION') }}"
    from_version: "{{ lookup('env', 'FROM_PSMDB_VERSION') }}"
  become: true
  become_method: sudo
  tasks:
    - set_fact: to_maj_version={{ to_version.split('.')[0] }}.{{ to_version.split('.')[1] }}

    - set_fact: from_maj_version={{ from_version.split('.')[0] }}.{{ from_version.split('.')[1] }}

    - set_fact: psmdb_mongosh={{ to_version.split('.')[0] }}

    - name: check maj version
      debug: msg={{to_maj_version}}_{{from_maj_version}} 

    - name: set compatibilty version for downgrade
      shell: |
        mongo --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{to_maj_version}}" })'
      register: set_version
      when: from_maj_version > to_maj_version
    
    - name: stop mongod service
      service:
        name: mongod
        state: stopped  

    - name: install necessary deb packages for downgrade
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: present
      vars:
        packages:
        - dialog
        - apt-utils
      when: ansible_os_family == "Debian" and from_version is version(to_version, '>')

    - name: uninstall psmdb deb packages for downgrade
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: absent
      vars:
        packages:
        - percona-server-mongodb
        - percona-mongodb-mongosh
        - percona-server-mongodb-server
        - percona-server-mongodb-mongos
        - percona-server-mongodb-shell
        - percona-server-mongodb-tools
#        - percona-server-mongodb-dbg
      when: ansible_os_family == "Debian" and from_version is version(to_version, '>') 

    - name: uninstall psmdb rpm packages for downgrade
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: absent
      vars:
        packages:
        - percona-server-mongodb
        - percona-mongodb-mongosh
        - percona-server-mongodb-server
        - percona-server-mongodb-mongos
        - percona-server-mongodb-shell
        - percona-server-mongodb-tools
#        - percona-server-mongodb-debugsource
#        - percona-server-mongodb-shell-debuginfo
#        - percona-server-mongodb-tools-debuginfo
#        - percona-server-mongodb-mongos-debuginfo
#        - percona-server-mongodb-server-debuginfo
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8" and from_version is version(to_version, '>')

    - name: uninstall psmdb rpm packages for downgrade
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: absent
      vars:
        packages:
        - percona-server-mongodb
        - percona-mongodb-mongosh
        - percona-server-mongodb-server
        - percona-server-mongodb-mongos
        - percona-server-mongodb-shell
        - percona-server-mongodb-tools
#        - percona-server-mongodb-debuginfo
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version <= "7" and from_version is version(to_version, '>')

    - name: disable all repos
      command: percona-release disable all

    - name: enable new psmdb repo
      command: percona-release enable psmdb-{{ to_version.split('.')[0] }}{{ to_version.split('.')[1] }} {{ to_repo }}

    - name: update psmdb deb packages
      apt:
        name: "{{ packages }}"
        update_cache: yes
      vars:
        packages:
        - percona-server-mongodb={{ to_version }}*
        - percona-server-mongodb-server={{ to_version }}*
        - percona-server-mongodb-mongos={{ to_version }}*
        - percona-server-mongodb-tools={{ to_version }}*
#        - percona-server-mongodb-dbg={{ to_version }}*
      when: ansible_os_family == "Debian"

    - name: update mongo shell deb packages
      apt:
        name: "{{ packages }}"
        update_cache: yes
      vars:
        packages:
        - percona-server-mongodb-shell={{ to_version }}*
      when: ansible_os_family == "Debian" and psmdb_mongosh < "6"

    - name: update mongosh deb packages
      apt:
        name: "{{ packages }}"
        update_cache: yes
      vars:
        packages:
        - percona-mongodb-mongosh
      when: ansible_os_family == "Debian" and psmdb_mongosh >= "6"

    - name: update psmdb rpm packages
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - percona-server-mongodb-{{ to_version }}
        - percona-server-mongodb-server-{{ to_version }}
        - percona-server-mongodb-mongos-{{ to_version }}
        - percona-server-mongodb-tools-{{ to_version }}
#        - percona-server-mongodb-debugsource-{{ to_version }}
#        - percona-server-mongodb-tools-debuginfo-{{ to_version }}
#        - percona-server-mongodb-mongos-debuginfo-{{ to_version }}
#        - percona-server-mongodb-server-debuginfo-{{ to_version }}
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version >= "8"

    - name: update psmdb rpm packages
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - percona-server-mongodb-{{ to_version }}
        - percona-server-mongodb-server-{{ to_version }}
        - percona-server-mongodb-mongos-{{ to_version }}
        - percona-server-mongodb-tools-{{ to_version }}
#        - percona-server-mongodb-debuginfo-{{ to_version }}
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version <= "7"

    - name: update mongo shell rpm packages
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - percona-server-mongodb-shell-{{ to_version }}
#        - percona-server-mongodb-shell-debuginfo-{{ to_version }}
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version >= "8" and psmdb_mongosh < "6"

    - name: update mongo shell rpm packages
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - percona-server-mongodb-shell-{{ to_version }}
      when: ansible_os_family == "RedHat"  and ansible_distribution_major_version <= "7" and psmdb_mongosh < "6"

    - name: update mongosh rpm packages
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - percona-mongodb-mongosh
      when: ansible_os_family == "RedHat" and psmdb_mongosh >= "6"

    - name: copy mongosh binary to mongo path for test scripts
      file:
        src: /usr/bin/mongosh
        dest: /usr/bin/mongo
        state: link
      when: psmdb_mongosh >= "6"

    - name: perform daemon-reload for systemd-based os
      systemd:
        daemon_reload: yes
      when: ansible_service_mgr == "systemd"

    - name: Check if /etc/mongod.conf.rpmsave exists
      stat:
        path: /etc/mongod.conf.rpmsave
      register: stat_rpmsave

    - name: If necessary replace mongod.conf with rpmsave 
      copy:
        remote_src: yes
        src: "/etc/mongod.conf.rpmsave"
        dest: /etc/mongod.conf
      when: stat_rpmsave.stat.exists

### all of this make sense until PSMDB-918      
    - name: Check if vault-token exists
      stat:
        path: /package-testing/scripts/psmdb_encryption/mongodb-test-vault-token
      register: stat_token
      
    - name: Ensure vault-token has correct permissions
      file:
        path: /package-testing/scripts/psmdb_encryption/mongodb-test-vault-token
        owner: mongod
        group: mongod
        mode: '0400'  
      when: stat_token.stat.exists    

    - name: Check if vault crt exists
      stat:
        path: /package-testing/scripts/psmdb_encryption/test.cer
      register: stat_crt
      
    - name: Ensure vault crt has correct permissions
      file:
        path: /package-testing/scripts/psmdb_encryption/test.cer
        owner: mongod
        group: mongod
        mode: '0400' 
      when:  stat_crt.stat.exists  
        
    - name: Check if keyfile exists
      stat:
        path: /package-testing/scripts/psmdb_encryption/mongodb-keyfile
      register: stat_key
      
    - name: Ensure keyfile has correct permissions
      file:
        path: /package-testing/scripts/psmdb_encryption/mongodb-keyfile
        owner: mongod
        group: mongod
        mode: '0400' 
      when:  stat_key.stat.exists

    - name: change permissions to mongodb directory after downgrade
      file:
        path: /var/lib/mongo
        state: directory
        recurse: yes
        owner: mongod
        group: mongod
      when: from_version > to_version
### EOF

    - name: start mongod service
      service: 
        name: mongod
        state: started

    - name: set compatibilty version after upgrade
      shell: |
        mongo --quiet --eval 'db.adminCommand({setFeatureCompatibilityVersion: "{{to_maj_version}}" })'
      when: from_maj_version < to_maj_version
