---
# tasks file for PSMDB
- set_fact:
    toolkit: "{{ lookup('env', 'ENABLE_TOOLKIT') | default('false', true) }}"

- set_fact:
    gated_build: "{{ lookup('env', 'GATED_BUILD') | default('false', true) }}"

- name: remove the Percona apt main repository
  apt_repository: repo='deb http://repo.percona.com/apt {{ ansible_distribution_release }} main' state=absent update_cache=yes
  when: ansible_os_family == "Debian"

- name: remove the Percona apt testing repositories
  apt_repository: repo='deb http://repo.percona.com/apt {{ ansible_distribution_release }} testing' state=absent update_cache=yes
  when: ansible_os_family == "Debian"

- name: remove the Percona yum repositories
  yum: name=percona-release state=absent
  when: ansible_os_family == "RedHat"

- name: remove saved repo files in yum
  file: path={{ item }} state=absent
  with_items:
    - /etc/yum.repos.d/percona-release.repo
    - /etc/yum.repos.d/percona-release.repo.rpmsave
  when: ansible_os_family == "RedHat"

- name: Install percona release package
  include_tasks: ../../../tasks/install_percona_release.yml

- name: Add ARM support into percona-release
  command: sed -i "s|x86_64|x86_64 aarch64|" /usr/bin/percona-release
  when: ansible_architecture == "aarch64" or ansible_architecture == "arm64"

- name: enable psmdb repo
  command: percona-release enable psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }} {{ repo }}
  vars:
    repo: "{{ lookup('env', 'REPO') }}"
    version: "{{ lookup('env', 'PSMDB_VERSION') }}"
  when: gated_build != true

- name: Create yum repo for gated build
  blockinfile:
    path: /etc/yum.repos.d/percona-gated.repo
    mode: '0640'
    create: true
    block: |
      [percona-gated]
      name=[psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }}-pro-{{ repo }}-x86_64]
      baseurl=http://repo.percona.com/private/{{ client_id }}-{{ client_token }}/psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }}-pro/yum/{{ repo }}/{{ ansible_distribution_major_version }}/RPMS/x86_64
      enabled=1
      gpgcheck=0
      sslverify=0
  vars:
    client_id: "{{ lookup('env', 'USERNAME') }}"
    client_token: "{{ lookup('env', 'PASSWORD') }}"
    repo: "{{ lookup('env', 'REPO') }}"
    version: "{{ lookup('env', 'PSMDB_VERSION') }}"
  when: ansible_os_family == "RedHat" and gated_build == true

- name: create apt repo for gated build
  apt_repository: repo='deb http://repo.percona.com/private/{{ client_id }}-{{ client_token }}/psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }}-pro/apt/ {{ ansible_distribution_release }} {{ repo }}' state=present update_cache=yes
  vars:
    client_id: "{{ lookup('env', 'USERNAME') }}"
    client_token: "{{ lookup('env', 'PASSWORD') }}"
    repo: "{{ lookup('env', 'REPO') }}"
    version: "{{ lookup('env', 'PSMDB_VERSION') }}"
  when: ansible_os_family == "Debian" and gated_build == true

- block:
    - name: include tasks for PSMDB install
      include_tasks: ../../../tasks/install_psmdb.yml
      vars:
        psmdb_to_test: "{{ lookup('env', 'PSMDB_VERSION') }}"
        psmdb_pkg_name_addon: "{{ '-pro' if gated_build == true else '' }}"
  environment:
    PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

- name: Attempt to start mongod service
  block:
    - name: start mongod service
      service: name=mongod state=started

  rescue:
    - name: Check the journal content
      shell: |
        journalctl -n 100 --no-pager
      register: journal_content

    - name: Print the journal
      debug:
        msg: "{{ journal_content }}"

    - name: Check mongod logs
      shell: |
        cat /var/log/mongo/mongod.log
      register: mongod_logs
      when: ansible_os_family == "RedHat"

    - name: Check mongod logs
      shell: |
        cat /var/log/mongodb/mongod.log
      register: mongod_logs
      when: ansible_os_family == "Debian"

    - name: Print mongod logs
      debug:
        msg: "{{ mongod_logs }}"

    - name: Fail
      command: /bin/false

- set_fact:
    job_name: "{{ lookup('env', 'JOB_NAME') | lower | default('local', true) }}"

- name: Reconfigure mongod for fips
  block:
    - name: stop mongod service
      service: name=mongod state=stopped

    - name: Truncate logs
      shell: truncate -s 0 /var/log/mongo/mongod.log
      when: ansible_os_family == "RedHat"

    - name: Truncate logs
      shell: truncate -s 0 /var/log/mongodb/mongod.log
      when: ansible_os_family == "Debian"
     
    - name: Reconfigure mongod.conf
      blockinfile:
        path: /etc/mongod.conf
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        insertafter: "net:"
        block: |
          {% filter indent(width=2, first=true) %}
          tls:
            FIPSMode: true
          {% endfilter %}

    - name: start mongod service
      service: name=mongod state=started

  rescue:
    - name: Check mongod conf
      shell: |
        cat /etc/mongod.conf
      register: mongod_conf

    - name: Print mongod conf
      debug:
        msg: "{{ mongod_conf }}"

    - name: Check mongod logs
      shell: |
        cat /var/log/mongo/mongod.log
      register: mongod_logs   
      when: ansible_os_family == "RedHat"

    - name: Check mongod logs
      shell: |
        cat /var/log/mongodb/mongod.log
      register: mongod_logs
      when: ansible_os_family == "Debian"   

    - name: Print mongod logs
      debug:
        msg: "{{ mongod_logs }}"

    - name: Fail
      command: /bin/false

  when: "'fips' in job_name"

- name: download package-testing repo with wget
  command: "{{ item }}"
  with_items:
    - rm -rf /package-testing
    - rm -f master.zip
    - wget --no-check-certificate -O main.zip https://github.com/Percona-QA/psmdb-testing/archive/refs/heads/main.zip
    - unzip main.zip
    - rm -f main.zip
    - mv psmdb-testing-main /package-testing

- name: setup tools repo with percona-release
  command: percona-release enable tools
  when: toolkit != false

- name: Install pt package Debian
  apt:
    name: percona-toolkit
  when: ansible_os_family == "Debian" and toolkit != false

- name: Install pt package RHEL
  yum:
    name: percona-toolkit
  when: ansible_os_family == "RedHat" and toolkit != false

- name: Make the backup of mongod.conf
  shell: |
    cp -r /etc/mongod.conf /etc/mongod.conf.default
