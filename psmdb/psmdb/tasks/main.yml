---
# tasks file for PSMDB
- set_fact:
    toolkit: "{{ lookup('env', 'ENABLE_TOOLKIT') | default('false', true) }}"

- set_fact:
    psmdb_mongosh: "{{ lookup('env', 'PSMDB_VERSION').split('.')[0] }}"

- name: remove the Percona apt main repository
  apt_repository: repo='deb http://repo.percona.com/apt {{ ansible_distribution_release }} main' state=absent update_cache=yes
  when: ansible_os_family == "Debian"

- name: remove the Percona apt testing repositories
  apt_repository: repo='deb http://repo.percona.com/apt {{ ansible_distribution_release }} testing' state=absent update_cache=yes
  when: ansible_os_family == "Debian"

- name: remove the Percona yum repositories
  yum: name=percona-release state=absent
  when: ansible_os_family == "RedHat"

- name: remove saved repo files in yum
  file: path={{ item }} state=absent
  with_items:
    - /etc/yum.repos.d/percona-release.repo
    - /etc/yum.repos.d/percona-release.repo.rpmsave
  when: ansible_os_family == "RedHat"

- name: Install percona release package
  include_tasks: ../../../tasks/install_percona_release.yml

- name: Add ARM support into percona-release
  command: sed -i "s|x86_64|x86_64 aarch64|" /usr/bin/percona-release
  when: ansible_architecture == "aarch64" or ansible_architecture == "arm64"

- name: enable psmdb repo
  command: percona-release enable psmdb-{{ version.split('.')[0] }}{{ version.split('.')[1] }} {{ repo }}
  vars:
    repo: "{{ lookup('env', 'REPO') }}"
    version: "{{ lookup('env', 'PSMDB_VERSION') }}"

- name: install psmdb deb packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
    - percona-server-mongodb={{ lookup('env', 'PSMDB_VERSION') }}*
    - percona-server-mongodb-server={{ lookup('env', 'PSMDB_VERSION') }}*
    - percona-server-mongodb-mongos={{ lookup('env', 'PSMDB_VERSION') }}*
    - percona-server-mongodb-tools={{ lookup('env', 'PSMDB_VERSION') }}*
    - percona-server-mongodb-dbg={{ lookup('env', 'PSMDB_VERSION') }}*
  when: ansible_os_family == "Debian"

- name: install psmdb rpm packages
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - percona-server-mongodb-{{ lookup('env', 'PSMDB_VERSION') }}
    - percona-server-mongodb-server-{{ lookup('env', 'PSMDB_VERSION') }}
    - percona-server-mongodb-mongos-{{ lookup('env', 'PSMDB_VERSION') }}
    - percona-server-mongodb-tools-{{ lookup('env', 'PSMDB_VERSION') }}
    - percona-server-mongodb-debuginfo-{{ lookup('env', 'PSMDB_VERSION') }}
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version <= "7"

- name: install psmdb rpm packages
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - percona-server-mongodb-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-server-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-mongos-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-tools-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-debugsource-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-tools-debuginfo-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-mongos-debuginfo-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-server-debuginfo-{{ lookup('env', 'PSMDB_VERSION') }}
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

- name: install psmdb rpm packages
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - percona-server-mongodb-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-server-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-mongos-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-tools-{{ lookup('env', 'PSMDB_VERSION') }}
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "9"

- name: install mongo shell deb package
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
    - percona-server-mongodb-shell={{ lookup('env', 'PSMDB_VERSION') }}*
  when: ansible_os_family == "Debian" and psmdb_mongosh < "6"

- name: install mongosh deb package
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
    - percona-mongodb-mongosh
  when: ansible_os_family == "Debian" and psmdb_mongosh >= "6"

- name: install mongo shell rpm package
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - percona-server-mongodb-shell-{{ lookup('env', 'PSMDB_VERSION') }}
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version <= "7" and psmdb_mongosh < "6"

- name: install mongo shell rpm packages
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - percona-server-mongodb-shell-{{ lookup('env', 'PSMDB_VERSION') }}
      - percona-server-mongodb-shell-debuginfo-{{ lookup('env', 'PSMDB_VERSION') }}
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "8" and psmdb_mongosh < "6"

- name: install mongosh rpm package
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - percona-mongodb-mongosh                                           
  when: ansible_os_family == "RedHat" and psmdb_mongosh >= "6"

- name: copy mongosh binary to mongo path for test scripts
  file:
    src: /usr/bin/mongosh
    dest: /usr/bin/mongo
    state: link
  when: psmdb_mongosh >= "6"
  
- name: Attempt to start mongod service
  block:
    - name: start mongod service 
      service: name=mongod state=started

  rescue:
    - name: Check the journal content
      shell: |
        journalctl -n 100 --no-pager
      register: journal_content

    - name: Print the journal                       
      debug:
        msg: "{{ journal_content }}"

    - name: Read the logs if failed
      shell: |
        cat /var/log/mongo/*
      register: logs_content

    - name: Print the logs content to a console
      debug:
        msg: "{{ logs_content }}"
    
    - name: Fail
      command: /bin/false

- name: download package-testing repo with wget
  command: "{{ item }}"
  with_items:
    - rm -rf /package-testing
    - rm -f master.zip
    - wget --no-check-certificate -O main.zip https://github.com/Percona-QA/psmdb-testing/archive/refs/heads/main.zip
    - unzip main.zip
    - rm -f main.zip
    - mv psmdb-testing-main /package-testing

- name: setup tools repo with percona-release
  command: percona-release enable tools
  when: toolkit != false

- name: Install pt package Debian
  apt:
    name: percona-toolkit
  when: ansible_os_family == "Debian" and toolkit != false

- name: Install pt package RHEL
  yum:
    name: percona-toolkit
  when: ansible_os_family == "RedHat" and toolkit != false

- name: install latest bats from github
  command: "{{ item }}"
  with_items:
    - rm -f master.zip
    - wget --no-check-certificate -O master.zip https://github.com/sstephenson/bats/archive/master.zip
    - unzip master.zip
    - rm -f master.zip
    - bats-master/install.sh /usr/local
    - rm -rf bats-master

- name: Install and configure vault
  include_tasks: ../../../tasks/install_and_configure_vault.yml

- name: Load some data
  command: /package-testing/scripts/mongo_insert.sh

