services:
  test:
    build:
      dockerfile: ./Dockerfile-testinfra
      context: .
    volumes:
      - .:/test
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - fs:/backups
    container_name: test
    hostname: test
    environment:
      - JIRA_SERVER=${JIRA_SERVER:-}
      - JIRA_USERNAME=${JIRA_USERNAME:-}
      - JIRA_PASSWORD=${JIRA_PASSWORD:-}
      - JENKINS_URL=${JENKINS_URL:-}
      - GIT_URL=https://github.com/percona/percona-backup-mongodb
      - GIT_BRANCH=${PBM_BRANCH:-dev}
    networks:
      - test

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    ports:
      - "10000:10000"
    networks:
      - test
    command: azurite-blob --blobHost 0.0.0.0 -d /dev/stdout

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - test
    volumes:
      - backups:/backups
    environment:
      - "MINIO_ACCESS_KEY=minio1234"
      - "MINIO_SECRET_KEY=minio1234"
    command: server /backups --console-address ":9001"

  nginx-minio:
    build:
      dockerfile: ./Dockerfile-nginx
      context: .
    container_name: nginx-minio
    hostname: nginx-minio
    networks:
      - test
    depends_on:
      - minio
      - easyrsa

  createbucket:
    container_name: createbucket
    image: minio/mc
    networks:
      - test
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c " sleep 5; /usr/bin/mc alias set myminio http://minio:9000 minio1234 minio1234; /usr/bin/mc mb myminio/bcp; exit 0; "

  pykmip:
    image: pykmip/local
    build:
      dockerfile: ./Dockerfile-pykmip
      context: .
    container_name: pykmip
    hostname: pykmip
    networks:
      - test
    depends_on:
      - easyrsa

  vault:
    image: hashicorp/vault
    container_name: vault
    hostname: vault
    ports:
      - "8200:8200"
    environment:
      - "VAULT_DEV_ROOT_TOKEN_ID=vaulttoken"
    networks:
      - test

  kerberos:
    image: kerberos/local
    build:
      dockerfile: ./Dockerfile-kerberos
      context: .
    container_name: kerberos
    hostname: kerberos
    environment:
      - "KRB5_TRACE=/dev/stderr"
    networks:
      - test
    volumes:
      - keytabs:/keytabs

  ldap:
    image: bitnami/openldap
    container_name: ldap
    hostname: ldap
    environment:
      - "LDAP_ADMIN_USERNAME=admin"
      - "LDAP_ADMIN_PASSWORD=password"
      - "LDAP_USERS=pbm"
      - "LDAP_PASSWORDS=pbmpass"
    ports:
      - "1389:1389"
      - "1636:1636"
    networks:
      - test

  build_member:
    image: replica_member/local
    build:
      dockerfile: ./Dockerfile
      context: .
      args:
        - PBM_BRANCH=${PBM_BRANCH:-dev}
        - GO_VER=${GO_VER:-bullseye}
        - PSMDB=${PSMDB:-percona/percona-server-mongodb:latest}
        - PR_NUMBER=${PR_NUMBER:-}
        - MAKE_TARGET=${MAKE_TARGET:-build}
    environment:
      - "PERCONA_TELEMETRY_URL=https://check-dev.percona.com/v1/telemetry/GenericReport"
    command: /bin/bash
    depends_on:
      - easyrsa

  easyrsa:
    image: easyrsa/local
    build:
      dockerfile: ./Dockerfile-easyrsa
      context: .
    command: /bin/bash

  golang_reports:
    image: golang:bullseye
    command: >
      /bin/sh -c " mkdir -p /gocoverdir/reports; chmod -R 777 /gocoverdir/reports; exit 0; "  
    volumes:
      - .:/test
      - gocoverdir:/gocoverdir

networks:
  test:
    name: test

volumes:
  backups:
    name: backups
  fs:
    name: fs
  keytabs:
    name: keytabs
  gocoverdir:
    name: gocoverdir
