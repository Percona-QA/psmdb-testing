FROM debian as builder     
ENV CMAKE_C_FLAGS=" -Wno-error=uninitialized "
ENV CMAKE_CXX_FLAGS=" -Wno-error=deprecated-declarations -Wno-error=uninitialized "
ENV AWS_LIBS=/tmp/lib/aws
ENV VIRTUAL_ENV=/opt/venv
ENV POETRY_VIRTUALENVS_CREATE=false
ENV POETRY_INSTALLER_MAX_WORKERS=10
ENV GLIBC_TUNABLES=glibc.pthread.rseq=0 
ARG psm_ver=8.0.0
ARG psm_release=0
ARG branch=v8.0
ARG AWS_VERSION=1.9.379
ARG mongo_tools_tag=100.4.1
ARG jemalloc_tag=psmdb-3.2.11-3.1
ARG repo=https://github.com/percona/percona-server-mongodb.git
ARG special_targets="dbtest mongo"
WORKDIR /opt
RUN apt update && apt install -y python3 python3-dev python3-venv python3-pip cmake curl libssl-dev libldap2-dev libkrb5-dev \
                                 libcurl4-openssl-dev libsasl2-dev liblz4-dev libpcap-dev libbz2-dev libsnappy-dev \
                                 zlib1g-dev libzlcore-dev libsasl2-dev liblzma-dev libext2fs-dev e2fslibs-dev bear \
                                 libc-devtools gcc g++ git wget lsb-release iproute2 net-tools tzdata python-is-python3 \
                                 clang lld libclang-dev libc++-dev libc++abi-dev 
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
RUN git clone https://github.com/percona/percona-server-mongodb.git && \
    cd percona-server-mongodb/ && \
    git checkout $branch && git pull && \
    pip install --upgrade pip && \
    pip install 'poetry==1.5.1' 'pyproject-hooks==1.0.0' && \
    for i in $(seq 5); do \
        poetry install --no-root --sync && break || sleep 1 ; \
        echo "Python failed install required deps with poetry, retrying..." ; \
    done && \
    rm -rf /opt/percona-server-mongodb/.git && mkdir -p /data/db
RUN cd /opt && git clone https://github.com/aws/aws-sdk-cpp.git && \
    mkdir -p /tmp/lib/aws && \
    cd aws-sdk-cpp && git checkout $AWS_VERSION && git submodule update --init --recursive && \
    mkdir build && cd build && \
    cmake .. -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3;transfer" -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_INSTALL_PREFIX="$AWS_LIBS" && \
    make install && cd /opt && rm -rf aws-sdk-cpp
RUN cd /opt/percona-server-mongodb/ && \
    buildscripts/scons.py MONGO_VERSION=$psm_ver -j8 --disable-warnings-as-errors --ssl --opt=on --use-sasl-client \
                          --wiredtiger --audit --inmemory --hotbackup CPPPATH="$AWS_LIBS/include" LIBPATH="$AWS_LIBS/lib" \
                          install-mongod install-mongos install-mongo install-dbtest build/install/bin/mongobridge build/install/bin/wt 
RUN strip --strip-debug /opt/percona-server-mongodb/build/install/bin/mongo && \
    strip --strip-debug /opt/percona-server-mongodb/build/install/bin/mongod && \
    strip --strip-debug /opt/percona-server-mongodb/build/install/bin/mongos && \
    strip --strip-debug /opt/percona-server-mongodb/build/install/bin/mongobridge && \
    strip --strip-debug /opt/percona-server-mongodb/build/install/bin/dbtest    

FROM debian
ENV CMAKE_C_FLAGS=" -Wno-error=uninitialized "
ENV CMAKE_CXX_FLAGS=" -Wno-error=deprecated-declarations -Wno-error=uninitialized "
ENV AWS_LIBS=/tmp/lib/aws
ENV VIRTUAL_ENV=/opt/venv
ENV POETRY_VIRTUALENVS_CREATE=false
ENV POETRY_INSTALLER_MAX_WORKERS=10
ENV GLIBC_TUNABLES=glibc.pthread.rseq=0
ARG psm_ver=8.0.0
ARG psm_release=0
ARG branch=v8.0
ARG AWS_VERSION=1.9.379
ARG mongo_tools_tag=100.4.1
ARG jemalloc_tag=psmdb-3.2.11-3.1
ARG repo=https://github.com/percona/percona-server-mongodb.git
ARG special_targets="dbtest mongo"
WORKDIR /opt
RUN apt update && apt install -y python3 python3-dev python3-venv python3-pip cmake curl libssl-dev libldap2-dev libkrb5-dev \
                                 libcurl4-openssl-dev libsasl2-dev liblz4-dev libpcap-dev libbz2-dev libsnappy-dev \
                                 zlib1g-dev libzlcore-dev libsasl2-dev liblzma-dev libext2fs-dev e2fslibs-dev bear \
                                 libc-devtools gcc g++ git wget lsb-release iproute2 net-tools tzdata python-is-python3 \
                                 clang lld libclang-dev libc++-dev libc++abi-dev 
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
RUN git clone https://github.com/percona/percona-server-mongodb.git && \
    cd percona-server-mongodb/ && \
    git checkout $branch && git pull && \
    pip install --upgrade pip && \
    pip install 'poetry==1.5.1' 'pyproject-hooks==1.0.0' && \
    for i in $(seq 5); do \
        poetry install --no-root --sync && break || sleep 1 ; \
        echo "Python failed install required deps with poetry, retrying..." ; \
    done && \
    rm -rf /opt/percona-server-mongodb/.git && mkdir -p /data/db
RUN cd /opt && git clone https://github.com/aws/aws-sdk-cpp.git && \
    mkdir -p /tmp/lib/aws && \
    cd aws-sdk-cpp && git checkout $AWS_VERSION && git submodule update --init --recursive && \
    mkdir build && cd build && \
    cmake .. -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3;transfer" -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_INSTALL_PREFIX="$AWS_LIBS" && \
    make install && cd /opt && rm -rf aws-sdk-cpp
COPY --from=builder /opt/percona-server-mongodb/build/install/bin/* /usr/bin/
WORKDIR /opt/percona-server-mongodb
ADD https://raw.githubusercontent.com/Percona-QA/psmdb-testing/main/regression-tests/resmoke2junit.py .
RUN find jstests -type f | xargs chmod 400 && \
    echo "mongo_version: \"$psm_ver-$psm_release\"" > .resmoke_mongo_version.yml && \
    pip3 install --upgrade wrapt && \
    cp /usr/bin/dbtest . && \
    support-files/ldap-sasl/deploy_ldap_and_sasl.sh || true && \
    echo "START=yes" >> /etc/default/saslauthd    
ENV PATH="${PATH}:/data/multiversion"
ENV PYTHONPATH="/opt/percona-server-mongodb:/opt/percona-server-mongodb/src"
ENV TZ=America/New_York
ENV PORTABLE=1
ENV USE_SSE=1
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone    
