---
- name: Converge
  hosts: all
  become: true
  become_method: sudo
  tasks:
    - set_fact:
        # Version of psmdb (e.g. 6.0, 7.0, 8.0)
        psmdb_version: "{{ lookup('env', 'PSMDB_VERSION') | default('8.0', true) }}"

    - set_fact:
        # User to log into each AWS Instance
        ssh_user: "{{ lookup('env', 'SSH_USER') | default('none', true) }}"

    - name: Install dependencies
      yum:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - git
          - python3-pip
          - wget
      when: ansible_os_family == "RedHat"

    - name: Install Percona Release
      include_tasks: ../../../tasks/install_percona_release.yml

    - name: Setup plm repo with percona-release
      command: percona-release enable plm {{ lookup('env', 'install_repo') }}

    - name: Install PLM
      yum:
        name: percona-link-mongodb
        update_cache: yes
        state: latest

    - name: Create Source PSMDB container
      containers.podman.podman_container:
        name: source
        image: docker.io/percona/percona-server-mongodb:{{ psmdb_version }}
        state: started
        restart_policy: unless-stopped
        published_ports:
          - "27017:27017"
        command: "--port=27017 --replSet rs0 --bind_ip_all"

    - name: Create Destination PSMDB container
      containers.podman.podman_container:
        name: destination
        image: docker.io/percona/percona-server-mongodb:{{ psmdb_version }}
        state: started
        restart_policy: unless-stopped
        published_ports:
          - "28017:27017"
        command: "--port=27017 --replSet rs1 --bind_ip_all"

    - name: Wait for mongodb to be ready on source container
      containers.podman.podman_container_exec:
        container: source
        command: >
          bash -c "until mongosh --quiet --eval 'db.runCommand({ ping: 1 })' > /dev/null 2>&1; do sleep 2; done"
      retries: 10
      delay: 3
      register: wait_mongo
      until: wait_mongo.rc == 0

    - name: Wait for mongodb to be ready on destination container
      containers.podman.podman_container_exec:
        container: destination
        command: >
          bash -c "until mongosh --quiet --eval 'db.runCommand({ ping: 1 })' > /dev/null 2>&1; do sleep 2; done"
      retries: 10
      delay: 3
      register: wait_mongo
      until: wait_mongo.rc == 0

    - name: Get info about the Source container
      containers.podman.podman_container_info:
        name: source
      register: source_container

    - name: Get info about the Destination container
      containers.podman.podman_container_info:
        name: destination
      register: destination_container

    - name: Store the Source Container IP
      set_fact:
        source_ip: "{{ source_container.container.NetworkSettings.Networks.bridge.IPAddress }}"

    - name: Store the Destination Container IP
      set_fact:
        destination_ip: "{{ destination_container.container.NetworkSettings.Networks.bridge.IPAddress }}"

    - name: Initiate source replicaset
      containers.podman.podman_container_exec:
        container: source
        command: >
          mongosh --quiet --eval 'try { rs.initiate({_id: "rs0", members: [{ _id: 0, host: "{{ source_ip }}:27017" }]}); } catch (e) { print(e); quit(1); }'
      register: rs_source_result
      retries: 2
      delay: 5
      until: rs_source_result.rc == 0

    - name: Initiate destination replicaset
      containers.podman.podman_container_exec:
        container: destination
        command: >
          mongosh --quiet --eval 'try { rs.initiate({_id: "rs1", members: [{ _id: 0, host: "{{ destination_ip }}:27017" }]}); } catch (e) { print(e); quit(1); }'
      register: rs_dest_result
      retries: 2
      delay: 5
      until: rs_dest_result.rc == 0

    - name: Add container IPs to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item.ip }} {{ item.hostname }}"
        state: present
        create: yes
      loop:
        - { ip: "{{ source_ip }}", hostname: "source" }
        - { ip: "{{ destination_ip }}", hostname: "destination" }
      become: true

    - name: Update PLM_SOURCE_URI
      lineinfile:
        path: /etc/sysconfig/plm
        regexp: '^PLM_SOURCE_URI='
        line: 'PLM_SOURCE_URI="mongodb://{{ source_ip }}:27017"'
        backrefs: yes

    - name: Update PLM_TARGET_URI
      lineinfile:
        path: /etc/sysconfig/plm
        regexp: '^PLM_TARGET_URI='
        line: 'PLM_TARGET_URI="mongodb://{{ destination_ip }}:27017"'
        backrefs: yes

    - name: Start PLM service
      service:
        daemon_reload: yes
        name: plm
        state: started
        enabled: yes